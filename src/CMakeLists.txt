#=============================================================================
# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.
#=============================================================================

cmake_minimum_required(VERSION 3.26.4)

list(APPEND CMAKE_MESSAGE_CONTEXT "legate")

cmake_path(SET LEGATE_CMAKE_DIR NORMALIZE "${CMAKE_CURRENT_LIST_DIR}/cmake")
if(NOT DEFINED CACHE{LEGATE_CMAKE_DIR})
  set(LEGATE_CMAKE_DIR # cmake-lint: disable=C0103
      "${LEGATE_CMAKE_DIR}" CACHE INTERNAL "" FORCE)
endif()

include("${LEGATE_CMAKE_DIR}/policies.cmake" NO_POLICY_SCOPE)

# ########################################################################################
# * Setup LEGATE_DIR and LEGATE_ARCH -------------------------------

if(NOT DEFINED LEGATE_DIR)
  # this one we can figure out on our own
  execute_process(COMMAND ${CMAKE_CURRENT_LIST_DIR}/../scripts/get_legate_dir.py
                  OUTPUT_VARIABLE LEGATE_DIR COMMAND_ERROR_IS_FATAL ANY)
  string(STRIP "${LEGATE_DIR}" LEGATE_DIR)
endif()

cmake_path(SET LEGATE_DIR NORMALIZE "${LEGATE_DIR}")
# push it to cache
set(LEGATE_DIR "${LEGATE_DIR}" CACHE PATH "Full path to the legate root directory" FORCE)

if(NOT DEFINED LEGATE_ARCH)
  set(bin_dir ${CMAKE_CURRENT_BINARY_DIR})
  if("$ENV{AEDIFIX}" STREQUAL "1")
    # We are being driven by Aedifix, that must mean our current binary path is
    # $LEGATE_DIR/<arch-name>/cmake_build. That being said, this path should never be
    # exercised, because aedifix should be setting this value for us!
    if(NOT "${bin_dir}" MATCHES "cmake_build$")
      message(FATAL_ERROR "Could not locate LEGATE_ARCH directory, expected binary dir to end "
                          "with 'cmake_build', but it is ${bin_dir}. Expected this directory structure "
                          "because environment variable: AEDIFIX=1. Likely this indicates this environment "
                          "variable is wrongly set.")
    endif()
    cmake_path(GET bin_dir PARENT_PATH bin_dir)
  endif()
  cmake_path(GET bin_dir STEM LEGATE_ARCH)
  unset(bin_dir)
endif()

# push it to cache
set(LEGATE_ARCH "${LEGATE_ARCH}" CACHE STRING "Name of the legate arch directory" FORCE)

cmake_path(SET LEGATE_ARCH_DIR NORMALIZE "${LEGATE_DIR}/${LEGATE_ARCH}")

# ########################################################################################
# * C++ and CUDA standard ----------------------------------------------------

function(legate_set_language_standard LANG DEFAULT)
  if(NOT CMAKE_${LANG}_STANDARD)
    set(CMAKE_${LANG}_STANDARD ${DEFAULT})
  endif()

  if(NOT "${CMAKE_${LANG}_STANDARD}" STREQUAL "${DEFAULT}")
    message(WARNING "CMAKE_${LANG}_STANDARD set to ${CMAKE_${LANG}_STANDARD}. "
                    "Legate expects to be compiled with C++${DEFAULT}")
  endif()

  set(CMAKE_${LANG}_STANDARD ${CMAKE_${LANG}_STANDARD} PARENT_SCOPE)
  set(CMAKE_${LANG}_STANDARD_REQUIRED ON PARENT_SCOPE)
endfunction()

legate_set_language_standard(CXX 17)
legate_set_language_standard(CUDA 17)

# ########################################################################################
# * Download and initialize RAPIDS CMake helpers -----------------------------

include("${LEGATE_CMAKE_DIR}/Modules/include_rapids.cmake")

legate_include_rapids()

macro(set_ifndef variable value)
  if(NOT DEFINED ${variable})
    set(${variable} ${value})
  endif()
endmacro()
# For now we want the optimization flags to match on both normal make and cmake builds so
# we override the cmake defaults here for release, this changes -O3 to -O2 and removes
# -DNDEBUG
set_ifndef(CMAKE_CXX_FLAGS_DEBUG "-O0 -g")
set_ifndef(CMAKE_CUDA_FLAGS_DEBUG "-O0 -g")
set_ifndef(CMAKE_CXX_FLAGS_RELEASE "-O2")
set_ifndef(CMAKE_CUDA_FLAGS_RELEASE "-O2")
set_ifndef(CMAKE_CXX_FLAGS_MINSIZEREL "-Os")
set_ifndef(CMAKE_CUDA_FLAGS_MINSIZEREL "-Os")
# Order is important, we want the release flags *last*. We want the enable-optimization
# flags to supersede any disable-optimization flags set by the debug flags.
set_ifndef(CMAKE_CXX_FLAGS_RELWITHDEBINFO
           "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS_RELEASE} -g")
set_ifndef(CMAKE_CUDA_FLAGS_RELWITHDEBINFO
           "${CMAKE_CUDA_FLAGS_DEBUG} ${CMAKE_CUDA_FLAGS_RELEASE} -g")
set_ifndef(BUILD_MARCH OFF)
set_ifndef(BUILD_MCPU OFF)

# Tells cmake to re-run configure if any of these files have changed. This is needed
# because these are all static files (i.e. not generated by some target), and cmake
# provides no easy way to create a target for static resources.
set_property(DIRECTORY
             APPEND
             PROPERTY CMAKE_CONFIGURE_DEPENDS
                      cmake/versions/versions.json
                      cmake/versions/legion_version.json
                      cmake/patches/mdspan_cpp_lib_span_dynamic_extent.diff
                      cmake/patches/mdspan_cpp_lib_span_extents.diff
                      cmake/patches/mdspan_cpp_lib_span_layout_stride.diff
                      cmake/patches/span_proper_cmake_project.diff
                      cmake/templates/install_info.py.in
                      cmake/templates/uninstall.cmake.in
                      cmake/templates/legate_defines.h.in)

set(legate_version 24.11.00)

if(SKBUILD)
  project(legate_python
          VERSION ${legate_version}
          LANGUAGES # TODO: Building Python extension modules via the
                    # python_extension_module requires the C language to be enabled here.
                    # The test project that is built in scikit-build to verify various
                    # linking options for the python library is hardcoded to build with C,
                    # so until that is fixed we need to keep C.
                    C CXX)
  add_subdirectory(python)
else()
  project(legate VERSION ${legate_version} LANGUAGES C CXX)
  add_subdirectory(cpp)
endif()

if(CMAKE_GENERATOR STREQUAL "Ninja")
  function(add_touch_legate_ninja_build_target)
    if(SKBUILD)
      set(_suf "_python")
    else()
      set(_suf)
    endif()
    add_custom_target("touch_legate${_suf}_ninja_build" ALL
                      COMMAND ${CMAKE_COMMAND} -E touch_nocreate
                              "${CMAKE_CURRENT_BINARY_DIR}/build.ninja"
                      COMMENT "touch build.ninja so ninja doesn't re-run CMake on rebuild"
                      VERBATIM)
    foreach(_dep IN ITEMS legate legate_python Legion LegionRuntime Realm RealmRuntime
                          Regent)
      if(TARGET ${_dep})
        add_dependencies("touch_legate${_suf}_ninja_build" ${_dep})
      endif()
    endforeach()
  endfunction()
  add_touch_legate_ninja_build_target()
endif()

list(POP_BACK CMAKE_MESSAGE_CONTEXT)

#=============================================================================
# SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#=============================================================================

cmake_minimum_required(VERSION 3.26.4)

list(APPEND CMAKE_MESSAGE_CONTEXT "legate")

cmake_path(SET LEGATE_CMAKE_DIR NORMALIZE "${CMAKE_CURRENT_LIST_DIR}/cmake")

if(APPLE)
  include("${LEGATE_CMAKE_DIR}/Modules/setup_macos_sdk_environ.cmake")

  legate_setup_macos_sdk_environ()
endif()

if(SKBUILD)
  set(legate_project_suffix python)
else()
  set(legate_project_suffix cpp)
endif()

project(legate_${legate_project_suffix}
        VERSION 25.07.00
        LANGUAGES CXX
        DESCRIPTION "Multi-node, Multi-GPU Parallel Runtime Library"
        HOMEPAGE_URL https://docs.nvidia.com/legate/latest/)

# ########################################################################################
# * Common Core --------------------------------------------------------

# ########################################################################################
# * Setup LEGATE_DIR and LEGATE_ARCH

if(NOT DEFINED LEGATE_DIR)
  # this one we can figure out on our own
  execute_process(COMMAND ${CMAKE_CURRENT_LIST_DIR}/../scripts/get_legate_dir.py
                  OUTPUT_VARIABLE LEGATE_DIR COMMAND_ERROR_IS_FATAL ANY
                  OUTPUT_STRIP_TRAILING_WHITESPACE)
  string(STRIP "${LEGATE_DIR}" LEGATE_DIR)
endif()

cmake_path(SET LEGATE_DIR NORMALIZE "${LEGATE_DIR}")

if(NOT DEFINED LEGATE_ARCH)
  set(bin_dir ${CMAKE_CURRENT_BINARY_DIR})
  if(AEDIFIX)
    # We are being driven by Aedifix, that must mean our current binary path is
    # $LEGATE_DIR/<arch-name>/cmake_build. That being said, this path should never be
    # exercised, because aedifix should be setting this value for us!
    if(NOT "${bin_dir}" MATCHES "cmake_build$")
      message(FATAL_ERROR "Could not locate LEGATE_ARCH directory, expected binary dir to end "
                          "with 'cmake_build', but it is ${bin_dir}. Expected this directory structure "
                          "because environment variable: AEDIFIX=1. Likely this indicates this environment "
                          "variable is wrongly set.")
    endif()
    cmake_path(GET bin_dir PARENT_PATH bin_dir)
  endif()
  cmake_path(GET bin_dir STEM LEGATE_ARCH)
  unset(bin_dir)
endif()

# push it to cache
set(LEGATE_ARCH "${LEGATE_ARCH}" CACHE STRING "Name of the legate arch directory" FORCE)

cmake_path(SET LEGATE_ARCH_DIR NORMALIZE "${LEGATE_DIR}/${LEGATE_ARCH}")

# ########################################################################################
# * C++ and CUDA standard ----------------------------------------------------

function(legate_set_language_standard LANG DEFAULT)
  if(NOT CMAKE_${LANG}_STANDARD)
    set(CMAKE_${LANG}_STANDARD ${DEFAULT})
  endif()

  if(NOT "${CMAKE_${LANG}_STANDARD}" STREQUAL "${DEFAULT}")
    message(WARNING "CMAKE_${LANG}_STANDARD set to ${CMAKE_${LANG}_STANDARD}. "
                    "Legate expects to be compiled with C++${DEFAULT}")
  endif()

  set(CMAKE_${LANG}_STANDARD ${CMAKE_${LANG}_STANDARD} PARENT_SCOPE)
  set(CMAKE_${LANG}_STANDARD_REQUIRED ON PARENT_SCOPE)
endfunction()

legate_set_language_standard(CXX 17)
legate_set_language_standard(CUDA 17)

# Tells cmake to re-run configure if any of these files have changed. This is needed
# because these are all static files (i.e. not generated by some target), and cmake
# provides no easy way to create a target for static resources.
set_property(DIRECTORY
             APPEND
             PROPERTY CMAKE_CONFIGURE_DEPENDS
                      "${LEGATE_CMAKE_DIR}/versions/versions.json"
                      "${LEGATE_CMAKE_DIR}/versions/legion_version.json"
                      "${LEGATE_CMAKE_DIR}/templates/uninstall.cmake.in"
                      "${LEGATE_CMAKE_DIR}/templates/legate_defines.h.in")

macro(set_ifndef variable value)
  if(NOT DEFINED ${variable})
    set(${variable} ${value})
  endif()
endmacro()

# For now we want the optimization flags to match on both normal make and cmake builds so
# we override the cmake defaults here for release, this changes -O3 to -O2 and removes
# -DNDEBUG
set_ifndef(CMAKE_CXX_FLAGS_DEBUG "-O0 -g")
set_ifndef(CMAKE_CUDA_FLAGS_DEBUG "-O0 -g")
set_ifndef(CMAKE_CXX_FLAGS_RELEASE "-O3")
set_ifndef(CMAKE_CUDA_FLAGS_RELEASE "-O3")
set_ifndef(CMAKE_CXX_FLAGS_MINSIZEREL "-Os")
set_ifndef(CMAKE_CUDA_FLAGS_MINSIZEREL "-Os")
# Order is important, we want the release flags *last*. We want the enable-optimization
# flags to supersede any disable-optimization flags set by the debug flags.
set_ifndef(CMAKE_CXX_FLAGS_RELWITHDEBINFO
           "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS_RELEASE} -g")
set_ifndef(CMAKE_CUDA_FLAGS_RELWITHDEBINFO
           "${CMAKE_CUDA_FLAGS_DEBUG} ${CMAKE_CUDA_FLAGS_RELEASE} -g")
set_ifndef(BUILD_MARCH OFF)
set_ifndef(BUILD_MCPU OFF)
set_ifndef(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set_ifndef(CMAKE_POSITION_INDEPENDENT_CODE ON)
set_ifndef(BUILD_SHARED_LIBS ON)

# ########################################################################################
# * rapids-cmake --------------------------------------------------------

include("${LEGATE_CMAKE_DIR}/Modules/include_rapids.cmake")

legate_include_rapids()

include(rapids-cmake)
include(rapids-cpm)
include(rapids-cuda)
include(rapids-export)
include(rapids-find)
include(rapids-version)

rapids_cmake_build_type(Release)

# ########################################################################################
# * conda environment --------------------------------------------------------

include(GNUInstallDirs)

rapids_cmake_support_conda_env(conda_env MODIFY_PREFIX_PATH)
# We're building python extension libraries, which must always be installed under lib/,
# even if the system normally uses lib64/. Rapids-cmake currently doesn't realize this
# when we're going through scikit-build, see
# https://github.com/rapidsai/rapids-cmake/issues/426 Do this before we include Legion, so
# its build also inherits this setting.
if(TARGET conda_env)
  set(CMAKE_INSTALL_LIBDIR "lib")
else()
  rapids_cmake_install_lib_dir(CMAKE_INSTALL_LIBDIR)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set(legate_PLATFORM_RPATH_ORIGIN "\$ORIGIN")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  set(legate_PLATFORM_RPATH_ORIGIN "@loader_path")
else()
  message(FATAL_ERROR "Unsupported system: ${CMAKE_SYSTEM_NAME}, don't know how to set "
                      "rpath 'origin' on this platform")
endif()

add_subdirectory(${legate_project_suffix})

list(POP_BACK CMAKE_MESSAGE_CONTEXT)

---
{% set name = "legate" %}
{% if gpu_enabled == "true" %}
  {% set gpu_enabled_bool = true %}
{% elif gpu_enabled == "false" %}
  {% set gpu_enabled_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set gpu_enabled_bool = false %}
{% endif %}
{% if upload_enabled == "true" %}
  {% set upload_enabled_bool = true %}
{% elif upload_enabled == "false" %}
  {% set upload_enabled_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set upload_enabled_bool = false %}
{% endif %}
{% set default_env_var = '' %}
{% if build_number is defined %}
    {# do nothing if defined #}
{% else %}
    {% set build_number = environ.get('GIT_DESCRIBE_NUMBER', '0') %}
{% endif %}
{% if package_version is defined %}
    {% set version = package_version %}
## The tag must be in one of the two formats (where N is a digit):
## vNN.NN.NN
## vNN.NN.NN.dev
{% elif 'dev' in environ.get('GIT_DESCRIBE_TAG', default_env_var) %}
    {% set version = (environ.get('GIT_DESCRIBE_TAG') ~ environ.get('GIT_DESCRIBE_NUMBER', default_env_var)).lstrip('v') %}
{% else %}
    {% set version = environ.get('GIT_DESCRIBE_TAG', default_env_var).lstrip('v') %}
{% endif %}
{% set cuda_version='.'.join(environ.get('CUDA', '12.2.2').split('.')[:2]) %}
{% set cuda_major=cuda_version.split('.')[0]|int %}
{% set py_version=environ.get('CONDA_PY', 36) %}

{% if use_local_path is not defined %}
{% set git_describe_hash='_' + environ.get('GIT_DESCRIBE_HASH', '0')%}
{% else %}
{% set git_describe_hash=''%}
{% endif %}

{% if not gpu_enabled_bool %}
{% set cpu_gpu_tag='_cpu' %}
{% else %}
{% set cpu_gpu_tag='_gpu' %}
{% endif %}

{% if build_mode_str == 'release' %}
{% set debug_tag='' %}
{% else %}
{% set sanitized_build_mode_str = build_mode_str | replace('-', '_') %}
{% set debug_tag='_' + sanitized_build_mode_str %}
{% endif %}

{% set sanitizer_build_bool = false %}  # Default to false
{% if 'sanitizer' in build_mode_str %}
   {% set sanitizer_build_bool = true %}
{% endif %}

{% set upload_tag='' if upload_enabled_bool else '_with_tests' %}

{% if network is not defined %}
# network must be defined. Let's fail if it is not.
invalid_yaml: {{ network }}
{% endif %}
{% set network_tag='_'+network %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
{% if package_tar is defined %}
  url: {{ package_tar }}
{% elif use_local_path is defined %}
  path: ../../
{% else %}
  git_url: ../../
{% endif %}

build:
  skip: true  # [not (linux or osx)]
  number: {{ build_number }}
  missing_dso_whitelist:
    - '*libcuda.so*'
    - '*libgtest.so*'

  string: "cuda{{ cuda_major }}_py{{ py_version }}{{ git_describe_hash }}_{{ PKG_BUILDNUM }}{{ network_tag }}{{ cpu_gpu_tag }}{{ debug_tag }}{{ upload_tag }}"
  script_env:
    - SCCACHE_BUCKET
    - SCCACHE_REGION
    - SCCACHE_IDLE_TIMEOUT
    - SCCACHE_S3_KEY_PREFIX
    - SCCACHE_S3_KEY_PREFIX
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - USE_OPENMP
    - ARTIFACTS_DIR
    - LEGATE_CI
    - BUILD_MARCH
    - LEGATE_BUILD_MODE={{ build_mode_str }}
    - LEGATE_NETWORK={{ network }}
{% if upload_enabled_bool %}
    - UPLOAD_ENABLED=1
{% endif %}
{% if not gpu_enabled_bool %}
    - CPU_ONLY=1
  # The CPU-only packages having more track_features than the GPU builds helps
  # the solver to prefer the GPU builds when both are viable candidates.
  # ref: https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#track-features
  track_features:
    - cpu_only
{% endif %}
  # These expressions force any downstream packages to
  # 1) Lock to the exact version (but not variant) that was used to compile it
  # 2) Force recompilation if this package is updated in order to use the new package
  run_exports:
    strong:
{% if not gpu_enabled_bool %}
      - {{ name|lower }} ={{ version }} =*_cpu*
{% else %}
      - {{ name|lower }} ={{ version }} =*_gpu*
{% endif %}
  ignore_run_exports_from:
    - cuda-nvcc
    - rich
{% if network == 'gex' %}
    - openmpi
{% endif %}

# Note clang must go first! gxx is also in clangxx!!!!!
{% if "clangxx" in compiler("cxx") %}
  {% set compiler_version = 16 %}
  {% set sanitizer_lib = "compiler-rt" %}
  {% set openmp_lib = "llvm-openmp" %}
{% elif "gxx" in compiler("cxx") %}
  {% set compiler_version = 11.2 %}
  {% set sanitizer_lib = "libsanitizer" %}
  {% set openmp_lib = "_openmp_mutex" %}
{% endif %}

requirements:
  # Compilers and build system
  build:
    - make
    - rust
    - ninja
    - cmake {{ cmake_version }}
    - {{ compiler('c') }} ={{ compiler_version }}    # [linux]
    - {{ compiler('cxx') }} ={{ compiler_version }}  # [linux]
    - {{ compiler('c') }}         # [osx]
    - {{ compiler('cxx') }}       # [osx]
    - doxygen
{% if gpu_enabled_bool %}
    - cuda-version ={{ cuda_version }}
    # these are all constrained by cuda-version
    - {{ compiler('cuda') }}
    # cupti is only in the build section for headers, not in the host section
    - cuda-cupti-dev
    # Cufile an NVML are not detected by our build system if we don't list them here
    # because of the include diretory structure.
    - libcufile-dev
    - cuda-nvml-dev
{% endif %}

  # Libraries and header files (C/C++).
  host:
    - zlib
    - python
    - cython >=3.0.1
    - scikit-build-core
    - setuptools_scm
    - rich
    - hdf5
{% if sanitizer_build_bool %}
    - {{ sanitizer_lib }} ={{ compiler_version }}
{% endif %}
{% if gpu_enabled_bool %}
    - cuda-version ={{ cuda_version }}
    # these are all constrained by cuda-version
    - nccl
    - cuda-cudart-dev
    - cuda-nvtx-dev
    - cuda-nvml-dev
    - cuda-driver-dev
    - libcufile-dev
    - libcal-dev
{% endif %}
{% if network == 'ucx' %}
    - ucx >=1.17,<1.18
{% endif %}
    - openmpi <5

  # Runtime python dependencies
  run:
    - numpy {{ numpy_version }}
    # FIXME(wonchanl): Kerchunk needs to be updated for Zarr v3
    - zarr <3
    - fsspec
    - kerchunk
    - zstd
    - pynvml
    - {{ openmp_lib }}
{% if sanitizer_build_bool %}
    - {{ sanitizer_lib }} ={{ compiler_version }}
{% endif %}
{% if gpu_enabled_bool %}
    # Pin to all minor versions of CUDA newer than the one built against, within the same major version.
    # cuda-version constrains the CUDA runtime version and ensures a compatible driver is available
    - {{ pin_compatible('cuda-version', min_pin='x.x', max_pin='x') }}
    # including __cuda here in 'run' ensures that 'conda install' always
    # prefers the CPU-only packages in environments without CUDA
    #
    # The floor on __cuda makes this stricter than the default constraint that comes through
    # depending on 'cuda-version' alone.
    - __cuda >={{ cuda_version }}
{% endif %}
    - rich

  run_constrained:
    - __glibc >=2.17  # [linux]
    - python >= 3.10

test:
  imports:
    - legate

about:
  home: https://github.com/nv-legate/legate
  license: NVIDIA Proprietary
  license_file: LICENSE
  summary: 'Scalable Computational Code'
  description: |
    The Legate project endeavors to democratize computing by
    making it possible for all programmers to leverage the power
    of large clusters of CPUs and GPUs by running the same code
    that runs on a desktop or a laptop at scale.
  doc_url: https://github.com/nv-legate/legate
  dev_url: https://github.com/nv-legate/legate

extra:
  recipe-maintainers:
    - m3vaz

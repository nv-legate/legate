{% set name = "legate-core" %}
{% if gpu_enabled == "true" %}
  {% set gpu_enabled_bool = true %}
{% elif gpu_enabled == "false" %}
  {% set gpu_enabled_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set gpu_enabled_bool = false %}
{% endif %}
{% if debug_enabled == "true" %}
  {% set debug_build_bool = true %}
{% elif debug_enabled == "false" %}
  {% set debug_build_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set debug_build_bool = false %}
{% endif %}
{% if upload_enabled == "true" %}
  {% set upload_enabled_bool = true %}
{% elif upload_enabled == "false" %}
  {% set upload_enabled_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set upload_enabled_bool = false %}
{% endif %}
{% if ucx_configured == "true" %}
  {% set ucx_configured_bool = true %}
{% elif ucx_configured == "false" %}
  {% set ucx_configured_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set ucx_configured_bool = false %}
{% endif %}
{% set default_env_var = '' %}
{% if build_number is defined %}
    {# do nothing if defined #}
{% else %}
    {% set build_number = environ.get('GIT_DESCRIBE_NUMBER', '0') %}
{% endif %}
{% if package_version is defined %}
    {% set version = package_version %}
## The tag must be in one of the two formats (where N is a digit):
## vNN.NN.NN
## vNN.NN.NN.dev
{% elif 'dev' in environ.get('GIT_DESCRIBE_TAG', default_env_var) %}
    {% set version = (environ.get('GIT_DESCRIBE_TAG') ~ environ.get('GIT_DESCRIBE_NUMBER', default_env_var)).lstrip('v') %}
{% else %}
    {% set version = environ.get('GIT_DESCRIBE_TAG', default_env_var).lstrip('v') %}
{% endif %}
{% set cuda_version='.'.join(environ.get('CUDA', '12.2.2').split('.')[:2]) %}
{% set cuda_major=cuda_version.split('.')[0]|int %}
{% set py_version=environ.get('CONDA_PY', 36) %}

{% if use_local_path is not defined %}
{% set git_describe_hash='_' + environ.get('GIT_DESCRIBE_HASH', '0')%}
{% else %}
{% set git_describe_hash=''%}
{% endif %}

{% if not gpu_enabled_bool %}
{% set cpu_tag='_cpu' %}
{% else %}
{% set cpu_tag='' %}
{% endif %}

{% if debug_build_bool %}
{% set debug_tag='_'+ build_mode_str %}
{% else %}
{% set debug_tag='' %}
{% endif %}

{% set upload_tag='' if upload_enabled_bool else '_with_tests' %}

{% if ucx_configured_bool %}
{% set ucx_tag='_ucx' %}
{% else %}
{% set ucx_tag='' %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
{% if package_tar is defined %}
  url: {{ package_tar }}
{% elif use_local_path is defined %}
  path: ../../
{% else %}
  git_url: ../../
{% endif %}

build:
  skip: true # [not (linux or osx)]
  number: {{ build_number }}
  missing_dso_whitelist:
    -  '*libcuda.so*'

  string: "cuda{{ cuda_major }}_py{{ py_version }}{{ git_describe_hash }}_{{ PKG_BUILDNUM }}{{ ucx_tag }}{{ cpu_tag }}{{ debug_tag }}{{ upload_tag }}"
  script_env:
    - SCCACHE_BUCKET
    - SCCACHE_REGION
    - SCCACHE_IDLE_TIMEOUT
    - SCCACHE_S3_KEY_PREFIX
    - SCCACHE_S3_KEY_PREFIX
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - SED
    - USE_OPENMP
    - ARTIFACTS_DIR
    - LEGATE_CI
    - BUILD_MARCH
{% if not gpu_enabled_bool %}
    - CPU_ONLY=1
  # The CPU-only packages having more track_features than the GPU builds helps
  # the solver to prefer the GPU builds when both are viable candidates.
  # ref: https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#track-features
  track_features:
    - cpu_only
{% endif %}
{% if debug_build_bool %}
    - DEBUG_BUILD=1
{% endif %}
{% if upload_enabled_bool %}
    - UPLOAD_ENABLED=1
{% endif %}
{% if ucx_configured_bool %}
    - UCX_ENABLED=1
{% endif %}
  run_exports:
{% if not gpu_enabled_bool %}
    - {{ pin_subpackage(name, min_pin="x.x.x", max_pin="x.x.x") }} =*_cpu*
{% else %}
    - {{ pin_subpackage(name, min_pin="x.x.x", max_pin="x.x.x") }}
{% endif %}
{% if gpu_enabled_bool %}
# prevent nccl from pulling in cudatoolkit
  ignore_run_exports:
    - cudatoolkit
  ignore_run_exports_from:
    - cuda-nvcc
{% endif %}

# Note clang must go first! gxx is also in clangxx!!!!!
{% if "clangxx" in compiler("cxx") %}
  {% set compiler_version = 16 %}
  {% set sanitizer_lib = "compiler-rt" %}
{% elif "gxx" in compiler("cxx") %}
  {% set compiler_version = 11.2 %}
  {% set sanitizer_lib = "libsanitizer" %}
{% endif %}

requirements:
  # Compilers and build system
  build:
    - make
    - rust
    - ninja
    - cmake {{ cmake_version }}
    - {{ compiler('c') }} ={{ compiler_version }}   # [linux]
    - {{ compiler('cxx') }} ={{ compiler_version }} # [linux]
    - {{ compiler('c') }}         # [osx]
    - {{ compiler('cxx') }}       # [osx]
    - libhwloc =* =*default*
{% if gpu_enabled_bool %}
    - cuda-nvcc ={{ cuda_version }}
{% endif %}
    - doxygen

  # Libraries and header files (C/C++).
  host:
    - zlib
    - python
    - cython >=3.0.1
    - llvm-openmp
    - scikit-build
    - elfutils # [linux]
    - libhwloc =* =*default*
{% if debug_build_bool %}
    - {{ sanitizer_lib }} ={{ compiler_version }}
{% endif %}
{% if gpu_enabled_bool %}
    - cuda-version ={{ cuda_version }}
    # these are all constrained by cuda-version
    - nccl
    - cuda-cudart-dev
    - cuda-nvtx-dev
    - cuda-nvml-dev
    - cuda-driver-dev
    - libcublas-dev
    - libcufft-dev
    - libcurand-dev
    - libcusolver-dev
{% endif %}
{% if ucx_configured_bool %}
    - ucx >=1.16
    - openmpi <5
{% endif %}

  # Runtime python dependencies
  run:
    - cffi
    - llvm-openmp
    - numpy {{ numpy_version }}
    - typing_extensions
    - elfutils # [linux]
    - libhwloc =* =*default*
{% if debug_build_bool %}
    - {{ sanitizer_lib }} ={{ compiler_version }}
{% endif %}
{% if gpu_enabled_bool %}
    # Pin to all minor versions of CUDA newer than the one built against, within the same major version.
    # cuda-version constrains the CUDA runtime version and ensures a compatible driver is available
    - {{ pin_compatible('cuda-version', min_pin='x.x', max_pin='x') }}
    # including __cuda here in 'run' ensures that 'conda install' always
    # prefers the CPU-only packages in environments without CUDA
    #
    # The floor on __cuda makes this stricter than the default constraint that comes through
    # depending on 'cuda-version' alone.
    - __cuda >={{ cuda_version }}
    # all other CUDA dependencies are constrained by cuda-version
    - cuda-cudart
    - nccl
{% endif %}
{% if ucx_configured_bool %}
    - ucx >=1.16
    - openmpi <5
{% endif %}

  run_constrained:
    - __glibc >=2.17  # [linux]
    - python >= 3.10

test:
  imports:
    - legate

about:
  home: https://github.com/nv-legate/legate.core
  license: NVIDIA Proprietary
  license_file: LICENSE
  summary: 'Scalable Computational Code'
  description: |
    The Legate project endeavors to democratize computing by
    making it possible for all programmers to leverage the power
    of large clusters of CPUs and GPUs by running the same code
    that runs on a desktop or a laptop at scale.
  doc_url: https://github.com/nv-legate/legate.core
  dev_url: https://github.com/nv-legate/legate.core

extra:
  recipe-maintainers:
    - m3vaz

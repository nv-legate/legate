# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0
---
{% set name = "legate" %}
{% set gpu_enabled_bool = gpu_enabled == 'true' %}
{% set build_tests_bool = build_tests == 'true' %}
{% set default_env_var = '' %}
{% if build_number is not defined %}
    {% set build_number = environ.get('GIT_DESCRIBE_NUMBER', '0') %}
{% endif %}
{% if package_version is defined %}
    {% set version = package_version %}
## The tag must be in one of the two formats (where N is a digit):
## vNN.NN.NN
## vNN.NN.NN.dev
{% elif 'dev' in environ.get('GIT_DESCRIBE_TAG', default_env_var) %}
    {% set version = (environ.get('GIT_DESCRIBE_TAG') ~ environ.get('GIT_DESCRIBE_NUMBER', default_env_var)).lstrip('v') %}
{% else %}
    {% set version = environ.get('GIT_DESCRIBE_TAG', default_env_var).lstrip('v') %}
{% endif %}
{% set cuda_version='.'.join(environ.get('CUDA_VERSION', '12.2.2').split('.')[:2]) %}
{% set cuda_major=cuda_version.split('.')[0]|int %}
{% set py_version=environ.get('CONDA_PY', 36) %}

{% set git_describe_hash='_' + environ.get('GIT_DESCRIBE_HASH', '0') if use_local_path is not defined else '' %}

{% if not gpu_enabled_bool %}
{% set cpu_gpu_tag='_cpu' %}
{% else %}
{% set cpu_gpu_tag='_gpu' %}
{% endif %}

{% if build_mode_str == 'release' %}
{% set debug_tag='' %}
{% else %}
{% set sanitized_build_mode_str = build_mode_str | replace('-', '_') %}
{% set debug_tag='_' + sanitized_build_mode_str %}
{% endif %}

{% set sanitizer_build_bool = 'sanitizer' in build_mode_str %}

{% set upload_tag='_with_tests' if build_tests_bool else '' %}

{% if network is not defined %}
# network must be defined. Let's fail if it is not.
invalid_yaml: {{ network }}
{% endif %}
{% set network_tag='_'+network %}

# UCX build constraint removed - using conda-forge version

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
{% if package_tar is defined %}
  url: {{ package_tar }}
{% elif use_local_path is defined %}
  path: ../../
{% else %}
  git_url: ../../
{% endif %}

build:
  skip: true  # [not (linux or osx)]
  number: {{ build_number }}
  missing_dso_whitelist:
    - '*libcuda.so*'
    - '*libgtest.so*'

  string: "{% if gpu_enabled_bool %}cuda{{ cuda_major }}_{% endif %}py{{ py_version }}{{ network_tag }}{{ cpu_gpu_tag }}{{ debug_tag }}{{ upload_tag }}{{ git_describe_hash }}_{{ PKG_BUILDNUM }}"
  script_env:
    - SCCACHE_BUCKET
    - SCCACHE_REGION
    - SCCACHE_IDLE_TIMEOUT
    - SCCACHE_S3_KEY_PREFIX
    - SCCACHE_S3_USE_SSL
    - SCCACHE_S3_NO_CREDENTIALS
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_SESSION_TOKEN
    - CMAKE_C_COMPILER_LAUNCHER
    - CMAKE_CUDA_COMPILER_LAUNCHER
    - CMAKE_CXX_COMPILER_LAUNCHER
    - USE_OPENMP
    - ARTIFACTS_DIR
    - LEGATE_CI
    - BUILD_MARCH
    - LEGATE_BUILD_MODE={{ build_mode_str }}
    - LEGATE_NETWORK={{ network }}
{% if build_tests_bool %}
    - BUILD_TESTS=1
{% endif %}
{% if not gpu_enabled_bool %}
    - CPU_ONLY=1
  # The CPU-only packages having more track_features than the GPU builds helps
  # the solver to prefer the GPU builds when both are viable candidates.
  # ref: https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#track-features
  track_features:
    - cpu_only
{% endif %}
  # These expressions force any downstream packages to
  # 1) Lock to the exact version (but not variant) that was used to compile it
  # 2) Force recompilation if this package is updated in order to use the new package
  run_exports:
    strong:
{% if not gpu_enabled_bool %}
      - {{ name|lower }} ={{ version }} =*_cpu*
{% else %}
      - {{ name|lower }} ={{ version }} =*_gpu*
{% endif %}
  ignore_run_exports_from:
    # This list contains a list of packages that potentially pin cuda-version
    - cuda-version
    - cuda-cudart
    - cuda-cudart-dev
    - cuda-driver-dev
    - cuda-nvtx
    - cuda-nvtx-dev
    - libcufile
    - libcufile-dev
    - nccl
    - cuda-nvcc
{% if network == 'gex' %}
    # When we build packages for GEX, we expect a system provided MPI.
    # Installing OpenMPI causes issues with GEX builds on Perlmutter (because of hwloc).
    - openmpi
{% endif %}
  ignore_run_exports:
    # We need to have an additional ignore for cuda-version as one of the packages
    # not in the ignore from list still adds a run export for cuda-version.
    - cuda-version

# Note clang must go first! gxx is also in clangxx!!!!!
{% if "clangxx" in compiler("cxx") %}
  {% set compiler_version = 16 %}
  {% set sanitizer_lib = "compiler-rt" %}
  {% set openmp_lib = "llvm-openmp" %}
{% elif "gxx" in compiler("cxx") %}
  {% set compiler_version = 14 %}
  {% set sanitizer_lib = "libsanitizer" %}
  {% set openmp_lib = "_openmp_mutex" %}
{% endif %}

requirements:
  # Compilers and build system
  build:
    - make
    - rust
    - ninja
    - cmake {{ cmake_version }}
    - {{ stdlib("c") }}
    - {{ compiler('c') }} ={{ compiler_version }}    # [linux]
    - {{ compiler('cxx') }} ={{ compiler_version }}  # [linux]
    - {{ compiler('c') }}         # [osx]
    - {{ compiler('cxx') }}       # [osx]
    - doxygen
{% if gpu_enabled_bool %}
    - cuda-version ={{ cuda_version }}
    # these are all constrained by cuda-version
    - {{ compiler('cuda') }}
    # cupti is only in the build section for headers, not in the host section
    - cuda-cupti-dev
    # Cufile an NVML are not detected by our build system if we don't list them here
    # because of the include directory structure.
    - libcufile-dev
    - cuda-nvml-dev
{% endif %}

  # Libraries and header files (C/C++).
  host:
    - zlib
    - python
    - cython >=3.0.1
    - scikit-build-core
    - setuptools_scm
    - rich
    - hdf5
{% if sanitizer_build_bool %}
    - {{ sanitizer_lib }} ={{ compiler_version }}
{% endif %}
{% if gpu_enabled_bool %}
    - cuda-version ={{ cuda_version }}
    # these are all constrained by cuda-version
    - nccl
    - cuda-cudart-dev
    - cuda-nvtx-dev
    - cuda-nvml-dev
    - cuda-driver-dev
    - libcufile-dev
{% endif %}
{% if network == 'ucx' %}
    - ucx
    - ucc
{% endif %}
    - openmpi <5

  # Runtime python dependencies
  run:
    - numpy {{ numpy_version }}
    - zarr <3
    - zstd
    - pynvml
    - {{ openmp_lib }}
{% if sanitizer_build_bool %}
    - {{ sanitizer_lib }} ={{ compiler_version }}
{% endif %}
{% if gpu_enabled_bool %}
    # including __cuda here in 'run' ensures that 'conda install' always
    # prefers the CPU-only packages in environments without CUDA
    - __cuda
    - {{ pin_compatible('cuda-version', min_pin='x', max_pin='x') }}
    - {{ pin_compatible('cuda-cudart',  min_pin='x', max_pin='x') }}
    - {{ pin_compatible('cuda-nvtx',    min_pin='x', max_pin='x') }}
    - libcufile      >=1.0,<2
    - nccl           >=2.0
{% endif %}
    - rich
{% if network == 'ucx' %}
    - ucx
{% endif %}

  run_constrained:
    - python >= 3.11
    - dask[distributed]

test:
  imports:
    - legate

about:
  home: https://github.com/nv-legate/legate
  license: Apache-2.0
  license_file: LICENSE
  summary: 'Scalable Computational Code'
  description: |
    The Legate project endeavors to democratize computing by
    making it possible for all programmers to leverage the power
    of large clusters of CPUs and GPUs by running the same code
    that runs on a desktop or a laptop at scale.
  doc_url: https://github.com/nv-legate/legate
  dev_url: https://github.com/nv-legate/legate

extra:
  recipe-maintainers:
    - m3vaz

#!/usr/bin/env bash

run_test_or_analysis() {
    set -x

    . legate-conda-utils
    . setup-utils;

    set_base_defs;
    # shellcheck disable=SC2154
    cd "${PREBUILD_DIR}"

    install_test_tools;

    install_legate_with_war;

    activate_conda_env;

    conda_info;

    set -xeuo pipefail

    # rename
    # shellcheck disable=SC2154
    export LEGATE_DIR="${REPO_DIR}"

    # HACK: this should be done much better, and in a much more transparent manner... but
    # alas, we no longer have any control of the setup phases in github ci, so we must do
    # it here.
    if [[ -z "${LEGATE_ARCH:-}" ]]; then
        local locase_uname
        locase_uname="$(uname | tr '[:upper:]' '[:lower:]')"
        # shellcheck disable=SC2154
        LEGATE_ARCH="arch-ci-${locase_uname}-${COMPILER:-gcc}-py-pkgs-${LEGATE_BUILD_MODE%-gcc}"

        export LEGATE_ARCH
    fi

    cd "${LEGATE_DIR}"

    if [[ ${LEGATE_ARCH} == *sanitizer* ]]; then
      # Needed to fix AddressSanitizer:DEADLYSIGNAL bug in GCC libsanitizer.
      # See https://stackoverflow.com/questions/77894856/possible-bug-in-gcc-sanitizers
      sysctl vm.mmap_rnd_bits=28
    fi

    # Need to LD_PRELOAD for both C++ and Python tests now, as the legate tester transitively loads liblegate.so
    function set_ld_preload()
    {
      if [[ ${LEGATE_ARCH} == *gcc-*-sanitizer* ]]; then
        # Trying to reproduce this on macOS? See
        # https://stackoverflow.com/questions/47619097/address-sanitizing-boost-python-modules
        #
        # The TL;DR is, however:
        #
        # asan_lib='/Library/Developer/CommandLineTools/usr/lib/clang/15.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib'
        #
        # py_paths='/path/to/legate.internal' (optional, only if you are using a venv)
        #
        # DYLD_INSERT_LIBRARIES=$asan_lib PYTHONPATH=$py_paths
        # /opt/homebrew/Cellar/python@3.11/3.11.5/Frameworks/Python.framework/Versions/3.11/Resources/Python.app/Contents/MacOS/Python
        # /path/to/your/file.py
        # shellcheck disable=SC2154
        local libasan_path="${CONDA_PREFIX}/lib/libasan.so"

        if [[ ! -f "${libasan_path}" ]]; then
          echo "Sanitizer libraries not found."
          echo "Expected to find ${libasan_path} but this seemingly does not exist"
          return 1
        fi

        export LD_PRELOAD="${libasan_path}"

        local asan_opts=()
        asan_opts+=("check_initialization_order=1")
        asan_opts+=("alloc_dealloc_mismatch=1")
        asan_opts+=("abort_on_error=1")
        asan_opts+=("strict_string_checks=1")
        asan_opts+=("color=always")
        asan_opts+=("detect_odr_violation=2")
        [[ -f ${CONDA_PREFIX}/bin/tests_with_gpus ]] && {
          # GPU build
          asan_opts+=("protect_shadow_gap=0")
        }
        asan_opts+=("symbolize=1")

        # Note trailing ':' on this! This is deliberate so we can do
        # ASAN_OPTIONS+='foo:bar:baz'
        #                                               v~~ trailing ':' here
        ASAN_OPTIONS="$(IFS=':'; echo "${asan_opts[*]}"):"
        export ASAN_OPTIONS
        export UBSAN_OPTIONS="include=${LEGATE_DIR}/share/legate/sanitizers/ubsan_default_options.txt"
        export LSAN_OPTIONS="suppressions=${LEGATE_DIR}/share/legate/sanitizers/lsan_suppressions.txt"
        export TSAN_OPTIONS="include=${LEGATE_DIR}/share/legate/sanitizers/tsan_default_options.txt:suppressions=${LEGATE_DIR}/share/legate/sanitizers/tsan_suppressions.txt"

      elif [[ ${LEGATE_ARCH} == *clang-*-sanitizer* ]]; then
        echo "Must properly implement Address sanitizer lib injection for Clang-based presets!"
        echo "See impls for GCC above"
        return 1
      fi
    }

    case "$1" in
        "python")
            echo "Executing python tests..."

            ucx_libs=(ucx openmpi openssh)

            set +u
            # shellcheck disable=SC2154
            mamba install -y -n "${CONDA_ENV}" -c conda-forge psutil pytest pytest-mock ipython jupyter_client "${ucx_libs[@]}"

            hdf5_libs=(zarr fsspec kerchunk)
            # shellcheck disable=SC2154
            mamba install -y -n "${CONDA_ENV}" "${hdf5_libs[@]}"
            # Conda packages for h5py are very outdated only going up to 3.11
            python3 -m pip install h5py
            set -u

            cd "${LEGATE_DIR}"
            # pytest doesn't truncate output if "CI" is defined in the env:
            # https://doc.pytest.org/en/latest/explanation/ci.html
            export CI=1

            set_ld_preload

            LEGATE_AUTO_CONFIG=0 pytest --color=yes tests/python -s
            ;;
        "cpp")
            echo "Running C++ unit tests..."
            mamba install -y -n "${DEFAULT_CONDA_ENV:-legate}" -c conda-forge psutil

            set +u
            mamba install -y -n "${CONDA_ENV}" ucx openmpi openssh
            set -u

            cd "${LEGATE_DIR}"

            EXTRA_ARGS=""
            # TODO (wonchanl, jfaibussowit) Sanitizers can raise false alarms if the code does
            # user-level threading, so we turn it off for sanitizer-enabled tests
            if [[ ${LEGATE_ARCH} == *sanitizer* ]]; then
              EXTRA_ARGS="-ll:force_kthreads"
            fi
            export EXTRA_ARGS

            function run_legate_tests()
            {
              local gtest_file="${1}"
              local proc_type="${2}"
              local proc_count="${3}"
              local worker_count="${4:-2}"
              LEGATE_TEST=1 LEGATE_AUTO_CONFIG=0 LEGATE_CONFIG="--${proc_type} ${proc_count} --sysmem 1000 --fbmem 1000" \
                "${gtest_file}" --gtest_color=yes "${EXTRA_ARGS}"
            }

            function run_legate_tests_with_driver()
            {
              local gtest_file="${1}"
              local proc_type="${2}"
              local proc_count="${3}"
              local worker_count="${4:-2}"
              python3 "${LEGATE_DIR}/test.py" \
                      --gtest-file "${gtest_file}" \
                      --verbose \
                      --debug \
                      --color \
                      --timeout 90 \
                      --"${proc_type}" "${proc_count}" \
                      --sysmem 100 \
                      -j "${worker_count}" \
                      "${EXTRA_ARGS}"
            }

            function run_sequential_tests()
            {
              # shellcheck disable=SC2154
              run_legate_tests "${CONDA_PREFIX}/bin/tests_wo_runtime" cpus 1
              # shellcheck disable=SC2154
              run_legate_tests_with_driver "${CONDA_PREFIX}/bin/tests_non_reentrant" cpus 1
            }

            function run_cpp_tests()
            {
              run_legate_tests "${CONDA_PREFIX}/bin/tests_with_runtime" "$@"
            }

            function run_gpu_tests()
            {
              run_legate_tests "${CONDA_PREFIX}/bin/tests_with_gpus" "$@"
            }

            function run_all_runtime_tests()
            {
              run_cpp_tests cpus 1
              # Also do some multi-CPU testing
              uname_value=$(uname)
              if [[ "${uname_value}" == "Darwin" ]]; then
                run_cpp_tests cpus 2
              else
                run_cpp_tests cpus 4
              fi

              if [[ -f ${CONDA_PREFIX}/bin/tests_with_gpus ]]; then
                run_gpu_tests gpus 1
              fi
            }

            set_ld_preload

            run_sequential_tests

            export LEGATE_WINDOW_SIZE=1
            run_all_runtime_tests

            # Run tests with the scheduling window enabled too
            export LEGATE_WINDOW_SIZE=1024
            run_all_runtime_tests
            ;;
        *)
            echo "Invalid case: $1"
            return 1
            ;;
    esac

    return 0
}

(run_test_or_analysis "$@");

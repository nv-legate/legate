#!/usr/bin/env bash
set -euo pipefail

export RAPIDS_SCRIPT_NAME="test"

# Need to LD_PRELOAD for both C++ and Python tests now, as the legate tester transitively loads liblegate.so
set_ld_preload()
{
  export LEGATE_LD_PRELOAD=""

  if [[ ${LEGATE_ARCH} == *gcc-*-sanitizer* ]]; then
    # Trying to reproduce this on macOS? See
    # https://stackoverflow.com/questions/47619097/address-sanitizing-boost-python-modules
    #
    # The TL;DR is, however:
    #
    # asan_lib='/Library/Developer/CommandLineTools/usr/lib/clang/15.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib'
    #
    # py_paths='/path/to/legate' (optional, only if you are using a venv)
    #
    # DYLD_INSERT_LIBRARIES=$asan_lib PYTHONPATH=$py_paths
    # /opt/homebrew/Cellar/python@3.11/3.11.5/Frameworks/Python.framework/Versions/3.11/Resources/Python.app/Contents/MacOS/Python
    # /path/to/your/file.py
    # shellcheck disable=SC2154
    local libasan_path="${CONDA_PREFIX}/lib/libasan.so"

    if [[ ! -f "${libasan_path}" ]]; then
      rapids-logger "Sanitizer libraries not found."
      rapids-logger "Expected to find ${libasan_path} but this seemingly does not exist"
      return 1
    fi

    export LEGATE_LD_PRELOAD="${libasan_path}"

    local asan_opts=()
    asan_opts+=("check_initialization_order=1")
    asan_opts+=("alloc_dealloc_mismatch=1")
    asan_opts+=("abort_on_error=1")
    asan_opts+=("strict_string_checks=1")
    asan_opts+=("color=always")
    asan_opts+=("detect_odr_violation=2")
    if [[ -f "${CONDA_PREFIX}/bin/tests_with_gpus" ]]; then
      # GPU build
      asan_opts+=("protect_shadow_gap=0")
    fi
    asan_opts+=("symbolize=1")

    # Note trailing ':' on this! This is deliberate so we can do
    # ASAN_OPTIONS+='foo:bar:baz'
    #                                               v~~ trailing ':' here
    ASAN_OPTIONS="$(IFS=':'; echo "${asan_opts[*]}"):"
    export ASAN_OPTIONS
    export UBSAN_OPTIONS="include=${LEGATE_DIR}/share/legate/sanitizers/ubsan_default_options.txt"
    export LSAN_OPTIONS="suppressions=${LEGATE_DIR}/share/legate/sanitizers/lsan_suppressions.txt"
    export TSAN_OPTIONS="include=${LEGATE_DIR}/share/legate/sanitizers/tsan_default_options.txt:suppressions=${LEGATE_DIR}/share/legate/sanitizers/tsan_suppressions.txt"

  elif [[ ${LEGATE_ARCH} == *clang-*-sanitizer* ]]; then
    rapids-logger "Must properly implement Address sanitizer lib injection for Clang-based presets!"
    rapids-logger "See impls for GCC above"
    return 1
  fi
}

run_test_or_analysis() {
    # rename
    # shellcheck disable=SC2154
    export LEGATE_DIR="${REPO_DIR}"

    local rapids_gha_tools_dir="${LEGATE_DIR}/gha-tools"
    git clone --depth 1 https://github.com/rapidsai/gha-tools.git -b main "${rapids_gha_tools_dir}"

    export PATH="${PATH}:${rapids_gha_tools_dir}/tools:${LEGATE_DIR}/continuous_integration/scripts/tools"

    . "$(dirname "$0")/tools/legate-conda-utils"
    . setup-utils;

    set_base_defs;
    # shellcheck disable=SC2154
    cd "${PREBUILD_DIR}"

    install_test_tools;

    install_legate_with_war;

    activate_conda_env;

    conda_info;

    if command -v "legate-issue" &> /dev/null; then
      legate-issue
    else
      rapids-logger "WARNING: legate-issue not found."
    fi

    # HACK: this should be done much better, and in a much more transparent manner... but
    # alas, we no longer have any control of the setup phases in github ci, so we must do
    # it here.
    if [[ -z "${LEGATE_ARCH:-}" ]]; then
        local locase_uname
        locase_uname="$(uname | tr '[:upper:]' '[:lower:]')"
        # shellcheck disable=SC2154
        LEGATE_ARCH="arch-ci-${locase_uname}-${COMPILER:-gcc}-py-pkgs-${LEGATE_BUILD_MODE%-gcc}"

        export LEGATE_ARCH
    fi

    cd "${LEGATE_DIR}"

    if [[ ${LEGATE_ARCH} == *sanitizer* ]]; then
      # Needed to fix AddressSanitizer:DEADLYSIGNAL bug in GCC libsanitizer.
      # See https://stackoverflow.com/questions/77894856/possible-bug-in-gcc-sanitizers
      sysctl vm.mmap_rnd_bits=28
    fi


    case "$2" in
      "cpu")
        export GPUS_COUNT=0
        ;;
      "gpu")
        export GPUS_COUNT=1
        ;;
      "2gpu")
        export GPUS_COUNT=2
        ;;
      *)
        rapids-logger "Invalid argument: $2"
        return 2
        ;;
    esac

    case "$1" in
        "python")
            rapids-logger "Executing python tests..."

            ucx_libs=(ucx openmpi openssh)

            set +u
            # shellcheck disable=SC2154
            rapids-conda-retry install \
                               -y \
                               -n "${CONDA_ENV}" \
                               -c conda-forge \
                               psutil pytest pytest-mock ipython jupyter_client cupy "${ucx_libs[@]}"

            hdf5_libs=(zarr fsspec kerchunk h5py)
            # shellcheck disable=SC2154
            rapids-conda-retry install \
                               -y \
                               -n "${CONDA_ENV}" \
                               "${hdf5_libs[@]}"
            set -u

            cd "${LEGATE_DIR}"
            # pytest doesn't truncate output if "CI" is defined in the env:
            # https://doc.pytest.org/en/latest/explanation/ci.html
            export CI=1

            set_ld_preload

            case "${GPUS_COUNT}" in
              "0")
                rapids-logger "Using CPUs ..."
                LD_PRELOAD="${LEGATE_LD_PRELOAD}" LEGATE_AUTO_CONFIG=0 pytest --color=yes tests/python -s
                ;;
              "1")
                rapids-logger "Using 1 GPU ..."
                LD_PRELOAD="${LEGATE_LD_PRELOAD}" LEGATE_AUTO_CONFIG=0 LEGATE_CONFIG="--fbmem 4000 --gpus 1" \
                          pytest \
                          --color=yes \
                          tests/python \
                          -s
                ;;
              "2")
                rapids-logger "Using 2 GPUs ..."
                LD_PRELOAD="${LEGATE_LD_PRELOAD}" LEGATE_AUTO_CONFIG=0 LEGATE_CONFIG="--fbmem 4000 --gpus 2" \
                          pytest \
                          --color=yes \
                          tests/python \
                          -s
                ;;
              *)
                rapids-logger "Invalid case: $2"
                return 2
                ;;
            esac
            ;;
        "cpp")
            rapids-logger "Running C++ unit tests..."
            rapids-conda-retry install \
                               -y \
                               -n "${DEFAULT_CONDA_ENV:-legate}" \
                               -c conda-forge \
                               psutil

            set +u
            rapids-conda-retry install \
                               -y \
                               -n "${CONDA_ENV}" \
                               ucx openmpi openssh
            set -u

            cd "${LEGATE_DIR}"

            function run_legate_tests()
            {
              local gtest_file="${1}"
              local proc_type="${2}"
              local proc_count="${3}"
              local worker_count="${4:-2}"
              LD_PRELOAD="${LEGATE_LD_PRELOAD}" \
                        LEGATE_TEST=1 \
                        LEGATE_AUTO_CONFIG=0 \
                        LEGATE_CONFIG="--${proc_type} ${proc_count} --sysmem 4000 --fbmem 1000" \
                        "${gtest_file}" \
                        --gtest_color=yes
            }

            function run_legate_tests_with_driver()
            {
              local gtest_file="${1}"
              local proc_type="${2}"
              local proc_count="${3}"
              local worker_count="${4:-2}"
              LD_PRELOAD="${LEGATE_LD_PRELOAD}" python3 "${LEGATE_DIR}/test.py" \
                        --gtest-file "${gtest_file}" \
                        --verbose \
                        --debug \
                        --color \
                        --timeout 90 \
                        --"${proc_type}" "${proc_count}" \
                        --sysmem 100 \
                        -j "${worker_count}"
            }

            function run_sequential_tests()
            {
              # shellcheck disable=SC2154
              run_legate_tests "${CONDA_PREFIX}/bin/tests_wo_runtime" cpus 1
              # shellcheck disable=SC2154
              run_legate_tests_with_driver "${CONDA_PREFIX}/bin/tests_non_reentrant_with_runtime" cpus 1
              # shellcheck disable=SC2154
              run_legate_tests_with_driver "${CONDA_PREFIX}/bin/tests_non_reentrant_wo_runtime" cpus 1
            }

            function run_cpp_tests()
            {
              run_legate_tests "${CONDA_PREFIX}/bin/tests_with_runtime" "$@"
            }

            function run_gpu_tests()
            {
              run_legate_tests "${CONDA_PREFIX}/bin/tests_with_gpus" "$@"
            }

            function run_all_runtime_tests()
            {
              if [[ "${GPUS_COUNT}" -ne 2 ]]; then
                run_cpp_tests cpus 1
                # Also do some multi-CPU testing
                uname_value=$(uname)
                if [[ "${uname_value}" == "Darwin" ]]; then
                  run_cpp_tests cpus 2
                else
                  run_cpp_tests cpus 4
                fi
              fi

              if [[ "${GPUS_COUNT}" -gt 0 ]]; then
                if [[ -f "${CONDA_PREFIX}/bin/tests_with_gpus" ]]; then
                  run_gpu_tests gpus "${GPUS_COUNT}"
                fi
              fi
            }

            set_ld_preload

            if [[ "${GPUS_COUNT}" -ne 2 ]]; then
              run_sequential_tests
            fi

            export LEGATE_WINDOW_SIZE=1
            run_all_runtime_tests

            # Run tests with the scheduling window enabled too
            export LEGATE_WINDOW_SIZE=1024
            run_all_runtime_tests
            ;;
        *)
            rapids-logger "Invalid case: $1"
            return 1
            ;;
    esac

    return 0
}

(run_test_or_analysis "$@");

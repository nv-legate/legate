#!/usr/bin/env bash
# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0
set -euo pipefail

export RAPIDS_SCRIPT_NAME="test"

run_test_or_analysis() {
    # rename
    # shellcheck disable=SC2154
    export LEGATE_DIR="${REPO_DIR}"

    local rapids_gha_tools_dir="${LEGATE_DIR}/gha-tools"
    git clone --depth 1 https://github.com/rapidsai/gha-tools.git -b main "${rapids_gha_tools_dir}"

    export PATH="${PATH}:${rapids_gha_tools_dir}/tools:${LEGATE_DIR}/continuous_integration/scripts/tools"

    . "$(dirname "$0")/tools/legate-conda-utils"
    . setup-utils;

    set_base_defs;
    # shellcheck disable=SC2154
    cd "${PREBUILD_DIR}"

    install_test_tools;

    install_legate_with_war;

    activate_conda_env;

    conda_info;

    if command -v "legate-issue" &> /dev/null; then
      legate-issue
    else
      rapids-logger "WARNING: legate-issue not found."
    fi

    # HACK: this should be done much better, and in a much more transparent manner... but
    # alas, we no longer have any control of the setup phases in github ci, so we must do
    # it here.
    if [[ -z "${LEGATE_ARCH:-}" ]]; then
        local locase_uname
        locase_uname="$(uname | tr '[:upper:]' '[:lower:]')"
        # shellcheck disable=SC2154
        LEGATE_ARCH="arch-ci-${locase_uname}-${COMPILER:-gcc}-py-pkgs-${LEGATE_BUILD_MODE%-gcc}"

        export LEGATE_ARCH
    fi

    cd "${LEGATE_DIR}"

    # Otherwise cuFile errors out when trying to perform GDS on a system that isn't set up
    # for it (which our CI runners are not).
    export CUFILE_ALLOW_COMPAT_MODE='true'

    case "$2" in
      "cpu")
        export GPUS_COUNT=0
        ;;
      "gpu")
        export GPUS_COUNT=1
        ;;
      "2gpu")
        export GPUS_COUNT=2
        ;;
      *)
        rapids-logger "Invalid argument: $2"
        return 2
        ;;
    esac

    case "$1" in
        "python")
            rapids-logger "Executing python tests..."

            ucx_libs=(ucx openmpi openssh)

            set +u
            # shellcheck disable=SC2154
            rapids-conda-retry install \
                               -y \
                               -n "${CONDA_ENV}" \
                               -c conda-forge \
                               psutil pytest pytest-mock ipython jupyter_client cupy "${ucx_libs[@]}"

            hdf5_libs=('zarr<3' h5py)
            # shellcheck disable=SC2154
            rapids-conda-retry install \
                               -y \
                               -n "${CONDA_ENV}" \
                               "${hdf5_libs[@]}"
            set -u

            cd "${LEGATE_DIR}"
            # pytest doesn't truncate output if "CI" is defined in the env:
            # https://doc.pytest.org/en/latest/explanation/ci.html
            export CI=1

            case "${GPUS_COUNT}" in
              "0")
                rapids-logger "Using CPUs ..."
                LEGATE_AUTO_CONFIG=0 pytest --color=yes tests/python -s
                ;;
              "1")
                rapids-logger "Using 1 GPU ..."
                LEGATE_AUTO_CONFIG=0 LEGATE_CONFIG="--fbmem 4000 --gpus 1" \
                          pytest \
                          --color=yes \
                          tests/python \
                          -s
                ;;
              "2")
                rapids-logger "Using 2 GPUs ..."
                LEGATE_AUTO_CONFIG=0 LEGATE_CONFIG="--fbmem 4000 --gpus 2" \
                          pytest \
                          --color=yes \
                          tests/python \
                          -s
                ;;
              *)
                rapids-logger "Invalid case: $2"
                return 2
                ;;
            esac
            ;;
        "cpp")
            rapids-logger "Running C++ unit tests..."
            rapids-conda-retry install \
                               -y \
                               -n "${DEFAULT_CONDA_ENV:-legate}" \
                               -c conda-forge \
                               psutil

            set +u
            rapids-conda-retry install \
                               -y \
                               -n "${CONDA_ENV}" \
                               ucx openmpi openssh
            set -u

            cd "${LEGATE_DIR}"

            function run_legate_tests()
            {
              local gtest_file="${1}"
              local proc_type="${2}"
              local proc_count="${3}"
              local worker_count="${4:-2}"
              LEGATE_TEST=1 \
                LEGATE_CONFIG="--${proc_type} ${proc_count} --sysmem 4000 --fbmem 1000 --auto-config=0" \
                "${gtest_file}" \
                --gtest_shuffle \
                --gtest_color=yes
            }

            function run_legate_tests_with_driver()
            {
              local gtest_file="${1}"
              local proc_type="${2}"
              local proc_count="${3}"
              local worker_count="${4:-2}"
              python3 "${LEGATE_DIR}/test.py" \
                        --gtest-file "${gtest_file}" \
                        --verbose \
                        --debug \
                        --color \
                        --timeout 90 \
                        --"${proc_type}" "${proc_count}" \
                        --sysmem 100 \
                        -j "${worker_count}"
            }

            function run_sequential_tests()
            {
              # shellcheck disable=SC2154
              run_legate_tests "${CONDA_PREFIX}/bin/tests_wo_runtime" cpus 1
              # shellcheck disable=SC2154
              run_legate_tests_with_driver "${CONDA_PREFIX}/bin/tests_non_reentrant_with_runtime" cpus 1
              # shellcheck disable=SC2154
              run_legate_tests_with_driver "${CONDA_PREFIX}/bin/tests_non_reentrant_wo_runtime" cpus 1
            }

            function run_cpp_tests()
            {
              run_legate_tests "${CONDA_PREFIX}/bin/tests_with_runtime" "$@"
            }

            function run_gpu_tests()
            {
              run_legate_tests "${CONDA_PREFIX}/bin/tests_with_gpus" "$@"
            }

            function run_all_runtime_tests()
            {
              if [[ "${GPUS_COUNT}" -ne 2 ]]; then
                run_cpp_tests cpus 1
                # Also do some multi-CPU testing
                uname_value=$(uname)
                if [[ "${uname_value}" == "Darwin" ]]; then
                  run_cpp_tests cpus 2
                else
                  run_cpp_tests cpus 4
                fi
              fi

              if [[ "${GPUS_COUNT}" -gt 0 ]]; then
                if [[ -f "${CONDA_PREFIX}/bin/tests_with_gpus" ]]; then
                  run_gpu_tests gpus "${GPUS_COUNT}"
                fi
              fi
            }

            if [[ "${GPUS_COUNT}" -ne 2 ]]; then
              run_sequential_tests
            fi

            export LEGATE_WINDOW_SIZE=1
            run_all_runtime_tests

            # Run tests with the scheduling window enabled too
            export LEGATE_WINDOW_SIZE=1024
            run_all_runtime_tests
            ;;
        "profiler")
            rapids-logger "Running legate profiler..."

            # shellcheck disable=SC2154
            if [[ "${USE_CUDA}" == "ON" ]]; then
              NCPUS=$(nproc --ignore 1)
            else
              NCPUS=1
            fi

            # Run the profiler test but keep going to package artifacts even on failure.
            set +e
            LEGATE_AUTO_CONFIG=0 LEGATE_TEST=1 \
              legate --profile --cpus "${NCPUS}" --gpus "${GPUS_COUNT}" \
                     "${CONDA_PREFIX}/bin/tests_with_runtime" \
                     --gtest_filter=TaskStoreTests/*
            prof_rc=$?
            set -e

            # Try to list any generated .prof files (non-fatal).
            find "${REPO_DIR}" -iname "*.prof" || true

            # Ensure output dir exists for packaging.
            # shellcheck disable=SC2154
            mkdir -p "${OUTPUT_ARTIFACTS_DIR}"

            # If raw profiler inputs exist, archive them and copy both inputs and
            # processed outputs into the OUTPUT_ARTIFACTS_DIR for upload.
            if compgen -G "${REPO_DIR}/legate_*.prof" > /dev/null; then
              # Install legate-profiler if needed; ignore failures so we still
              # attempt to package raw inputs below.
              # shellcheck disable=SC2154
              rapids-conda-retry install \
                    -y \
                    -n "${CONDA_ENV}" \
                    -c "${PROFILER_DIR}/conda-build/legate-profiler" \
                    legate-profiler || true

              # Archive to legate_prof; ignore failures so we still upload inputs.
              "${CONDA_PREFIX}"/bin/legate_prof archive "${REPO_DIR}"/legate_*.prof || true

              # Copy processed profiler output if present
              if [[ -d legion_prof ]]; then
                cp -a legion_prof "${OUTPUT_ARTIFACTS_DIR}/" || true
              fi

              # Also package the profiler input logs together with the outputs
              # so downstream debugging has access to the raw .prof files.
              # This addresses nv-legate/legate.internal#2649.
              inputs_dir="${OUTPUT_ARTIFACTS_DIR}/profiler-inputs"
              mkdir -p "${inputs_dir}"
              cp -a "${REPO_DIR}"/legate_*.prof "${inputs_dir}/" || true
            else
              rapids-logger "No profiler input logs (legate_*.prof) found to package"
            fi

            # Propagate the profiler test result
            return "${prof_rc}"
            ;;
        *)
            rapids-logger "Invalid case: $1"
            return 1
            ;;
    esac

    return 0
}

(run_test_or_analysis "$@");

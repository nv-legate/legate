#! /usr/bin/env bash

set -xeuo pipefail;

get_vault_token() {
    set -eo pipefail
    local VAULT_HOST="$1";
    local user_org="$2";
    local gh_token="$3";

    local vault_token=null;

    vault_token="$(                                   \
        curl -s                                       \
            -X POST                                   \
            -H "Content-Type: application/json"       \
            -d "{\"token\": \"$gh_token\"}"           \
            "$VAULT_HOST/v1/auth/github-${user_org}/login" \
        | jq -r '.auth.client_token'                    \
    )";

    echo "vault_token='$vault_token'";
}

vault_s3_init() {
    set -eo pipefail
    # Attempt to retrieve temporary AWS credentials from a vault
    # instance using GitHub OAuth.

    eval "export $(find $REPO_DIR/.creds -type f -exec bash -c 'echo $(basename $0)=$(<$0)' {} \;)";

    if [[ -z "${VAULT_HOST:-}" ]]; then return; fi
    if [[ -z "${SCCACHE_BUCKET:-}" ]]; then return; fi
    if [[ -z "${GH_TOKEN:-}" ]]; then return; fi

    echo ""
    echo "Attempting to use your GitHub account to authenticate";
    echo "with vault at '${VAULT_HOST}'.";
    echo ""

    local vault_token=null;
    local user_orgs=nv-legate;

    # Attempt to authenticate with GitHub
    eval "$(get_vault_token "${VAULT_HOST}" ${user_orgs} $GH_TOKEN)";

    if [[ "${vault_token:-null}" == null ]]; then
        echo "Your GitHub user was not recognized by vault. Exiting." >&2;
        return;
    fi

    echo "Successfully authenticated with vault!";

    local ttl="${VAULT_S3_TTL:-"43200s"}";
    local uri="${VAULT_S3_URI:-"v1/aws/creds/devs"}";

    # Generate temporary AWS creds
    local aws_creds="$(                         \
        curl -s                                 \
            -X GET                              \
            -H "X-Vault-Token: $vault_token"    \
            -H "Content-Type: application/json" \
            "${VAULT_HOST}/$uri?ttl=$ttl"       \
      | jq -r '.data'                           \
    )";

    export AWS_ACCESS_KEY_ID="$(echo "$aws_creds" | jq -r '.access_key')";
    export AWS_SECRET_ACCESS_KEY="$(echo "$aws_creds" | jq -r '.secret_key')";

    if [[ "${AWS_ACCESS_KEY_ID:-null}" == null ]]; then
        echo "Failed to generate temporary AWS S3 credentials. Exiting." >&2;
        return;
    fi

    if [[ "${AWS_SECRET_ACCESS_KEY:-null}" == null ]]; then
        echo "Failed to generate temporary AWS S3 credentials. Exiting." >&2;
        return;
    fi

    # Generate AWS config files
    mkdir -p ~/.aws;

    echo "$(date '+%s')" > ~/.aws/stamp;

    cat <<EOF > ~/.aws/config
[default]
${SCCACHE_BUCKET:+bucket=$SCCACHE_BUCKET}
${SCCACHE_REGION:+region=$SCCACHE_REGION}
EOF

    cat <<EOF > ~/.aws/credentials
[default]
aws_access_key_id=$AWS_ACCESS_KEY_ID
aws_secret_access_key=$AWS_SECRET_ACCESS_KEY
EOF

    chmod 0600 ~/.aws/{config,credentials};

    echo "Successfully generated temporary AWS S3 credentials!";

    # Stop server and reset sccache stats.
    sccache --stop-server || true

    # Wait for AWS credentials to propagate
    sleep 10
    sccache --show-stats
}

(vault_s3_init "$@");
#!/bin/bash

set -xuo pipefail

#Set the options of the getopt command
format=$(getopt -n "$0" -l "base-image:,image-tag:,source-dir:" -- -- "$@")
if [ $# -lt 4 ]; then
   echo "Wrong number of arguments passed."
   exit
fi
eval set -- "$format"

#Read the argument values
while [ $# -gt 0 ]
do
     case "$1" in
          --base-image) BASE_IMAGE="$2"; shift;;
          --image-tag) IMAGE_TAG="$2"; shift;;
          --source-dir) SOURCE_DIR="$2"; shift;;
          --) shift;;
     esac
     shift;
done

set -e
echo "PRGX: UCX_ENABLED: $UCX_ENABLED"
if [ "$UCX_ENABLED" = "ON" ]; then
     echo "PRGX: $SOURCE_DIR, $PWD"
     sed -i 's@DLegion_NETWORKS=@DLegion_NETWORKS=ucx@g' $SOURCE_DIR/continuous_integration/home/coder/.local/bin/build-legate-cpp
     sed -i '\/conda-build\/conda_build_config\.yaml/a ucx:\n\  - ">=1.14"' $SOURCE_DIR/continuous_integration/home/coder/.local/bin/build-legate-conda
     sed -i 's/\-\-no\-ucx/\-\-ucx   /g' $SOURCE_DIR/continuous_integration/home/coder/.local/bin/conda-utils
     sed -i  '/-c conda-forge pytest/s/$/ ucx openmpi/g' $SOURCE_DIR/continuous_integration/home/coder/.local/bin/run-test-or-analysis
fi

# Avoid build errors due to a missing .creds folder
mkdir -p "$SOURCE_DIR/.creds"

export DOCKER_BUILDKIT=1

docker build \
     --build-arg BASE_IMAGE="$BASE_IMAGE" \
     --build-arg AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN" \
     --build-arg AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
     --build-arg AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
     --build-arg GITHUB_TOKEN="$GITHUB_TOKEN" \
     --build-arg USE_CUDA="$USE_CUDA" \
     --build-arg UCX_ENABLED="$UCX_ENABLED" \
     --progress=plain \
     --tag="$IMAGE_TAG" \
     -f "$SOURCE_DIR/continuous_integration/Dockerfile" "$SOURCE_DIR"

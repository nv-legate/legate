# -*- mode: makefile-gmake -*-
# SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0
export MAKEFLAGS += --no-builtin-rules

.SUFFIXES:
.DELETE_ON_ERROR:
.NOTPARALLEL: # parallelism is handled otherwise

.DEFAULT_GOAL := all

ifndef LEGATE_DIR
export LEGATE_DIR := $(shell ./scripts/get_legate_dir.py)
endif

ifndef LEGATE_ARCH
export LEGATE_ARCH := $(shell ./scripts/get_legate_arch.py)
endif

include $(LEGATE_DIR)/$(LEGATE_ARCH)/variables.mk

## Option types:
##
## x|y|z|...      - Mutually exclusive literal values. The option expects either x or
##                  y or z etc.
## /absolute/path - An absolute file-system path. The path must exist (the ultimate
##                  consumer of the option may or may not check for existence), and must
##                  be fully resolved (the ultimate consumer of the option may or may not
##                  do any expansions).
## /any/path      - Any kind of path. The path must exist (the ultimate consumer of the
##                  option may or may not check for existence), but it may be either
##                  relative or absolute. If relative, the path is resolved relative to
##                  the location of this Makefile.
## directory      - The literal name of a directory. This must not be a path. The
##                  directory may or may not exist, see specific option help text for
##                  further guidance.
## '...'          - Any arbitrary string of arguments. For example '-foo -bar -baz'.
##
## Common options for all commands:
##
## - VERBOSE=0|1                    - Whether to enable verbose output.
## - V=0|1                          - Alias for VERBOSE.
## - LEGATE_DIR=/absolute/path      - Override (or set) the root directory for Legate.
## - LEGATE_ARCH=directory          - Override (or set) the current arch directory. The
##                                    arch directory must exist.

## Print this help message.
##
.PHONY: help
help: aedifix-default-help

## Build the library.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: all
all:
	@$(LEGATE_BUILD_COMMAND) $(LEGATE_CMAKE_ARGS)
	@$(CMAKE) -E echo "Ensure libraries are working by running:"
	@$(CMAKE) -E echo "$$ LEGATE_DIR=${LEGATE_DIR} LEGATE_ARCH=${LEGATE_ARCH} make check"

## Remove build artifacts.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: clean
clean:
	@$(LEGATE_BUILD_COMMAND) --target clean $(LEGATE_CMAKE_ARGS)
	@$(CMAKE) -E rm -rf -- $(LEGATE_DIR)/legate.egg-info
	@$(CMAKE) -E rm -rf -- $(LEGATE_DIR)/src/python/legate.egg-info
	@$(CMAKE) -E rm -rf -- $(LEGATE_DIR)/$(LEGATE_ARCH)/skbuild_core

## Install the C++ library.
##
## Options:
## - LEGATE_CMAKE_ARGS='...'   - Any additional arguments to pass to the cmake command.
## - PREFIX=/any/path               - Set installation prefix of the final install.
## - DESTDIR=/any/path              - Alias for PREFIX.
## - CMAKE_INSTALL_PREFIX=/any/path - If cmake version >= 29, alias for PREFIX,
##                                    otherwise has no effect.
##
.PHONY: install
install: all
	@$(LEGATE_INSTALL_COMMAND) $(LEGATE_INSTALL_PREFIX_COMMAND) $(LEGATE_CMAKE_ARGS)

## Uninstall the C++ library.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
## This command is best-effort. CMake by default does not provide an uninstall command
## (for what reason, nobody knows), and so this command is synthesized by parsing the
## install manifest and deleting all the files listed therein. If a file is NOT listed in
## the manifest, it is not removed. This results in some interesting caveats:
##
## The manifest generated by CMake is subtly incomplete. It only lists the file names that
## were installed, not whether an installation command also created directories.
##
## We try to determine whether the directories were created by checking if the directory
## is empty after we remove the files from it but this is not foolproof.
##
## For example, if a prior installation creates a directory, but places nothing inside it,
## then this command won't know to delete the directory, because it never knew to traverse
## it.
##
.PHONY: uninstall
uninstall:
	@$(LEGATE_BUILD_COMMAND) --target uninstall $(LEGATE_CMAKE_ARGS)

## Create an installable package of the library.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: package
package: all
	@$(LEGATE_BUILD_COMMAND) --target package $(LEGATE_CMAKE_ARGS)

## Run clang-tidy over the repository.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: tidy
tidy:
	@$(LEGATE_BUILD_COMMAND) --target tidy $(LEGATE_CMAKE_ARGS)

## Run clang-tidy only over the files which have been changed by your branch.
##
## Beware that this target may not fully work. Turns out asking git "which base branch is
## my current branch based off of" is more or less impossible to answer reliably... so
## depending on which branch it selects, this might not do what you want. It may try to
## check more files than needed (worst case, all of them), or it may not check all
## files. Buyer beware.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: tidy-diff
tidy-diff:
	@$(LEGATE_BUILD_COMMAND) --target tidy-diff $(LEGATE_CMAKE_ARGS)

## Generate raw doxygen output.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: doxygen
doxygen:
	@$(LEGATE_BUILD_COMMAND) --target Doxygen $(LEGATE_CMAKE_ARGS)

## Build combined Sphinx documentation.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: docs
docs: export LEGATE_AUTO_CONFIG=0
docs: doxygen
	@$(LEGATE_BUILD_COMMAND) --target Sphinx $(LEGATE_CMAKE_ARGS)

## Build combined Sphinx documentation with the hypothes.is annotation overlay.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: docs-dev
docs-dev: export LEGATE_ANNOTATION_DOCS=1
docs-dev: docs

## Serve combined Sphinx documentation.
##
## Options:
## - LEGATE_CMAKE_ARGS='...' - Any additional arguments to pass to the cmake command.
##
.PHONY: docserve
docserve:
	@$(PYTHON) -m http.server -d $(LEGATE_DIR)/$(LEGATE_ARCH)/cmake_build/cpp/docs/legate/sphinx


## A quick smoke-check for the built library.
##
.PHONY: check
check:
	@$(SHELL) $(LEGATE_DIR)/scripts/maint/run_check.sh \
                'single-node' \
                --gtest-filter 'LogicalArrayCreateUnit.*CreateBoundPrimitiveArray.*'
	@$(SHELL) $(LEGATE_DIR)/scripts/maint/run_check.sh \
                'multi-node' \
                --ranks-per-node 2 \
                --launcher mpirun \
                --gtest-filter 'LogicalArrayCreateUnit.*CreateBoundPrimitiveArray.*'

..
  SPDX-FileCopyrightText: Copyright (c) 2022-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
  SPDX-License-Identifier: Apache-2.0

Changes: 25.10
==============
..
   STYLE:
   * Capitalize sentences.
   * Use the imperative tense: Add, Improve, Change, etc.
   * Use a period (.) at the end of entries.
   * Be concise yet informative.
   * If possible, provide an executive summary of the new feature, but do not
     just repeat its doc string. However, if the feature requires changes from
     the user, then describe those changes in detail, and provide examples of
     the changes required.


.. rubric:: General

- Add support for CUDA 13.

C++
---

.. rubric:: General

- Remove ``legate/cuda/cuda.h``.
- Remove ``LEGATE_CHECK_CUDA()`` and ``LegateCheckCUDA()``.
- Remove ``LEGATE_CHECK_CUDA_STREAM()`` and ``LegateCheckCUDAStream()``.
- Remove ``LEGATE_THREADS_PER_BLOCK``, ``LEGATE_MIN_CTAS_PER_SM``,
  ``LEGATE_MAX_REDUCTION_CTAS``, and ``LEGATE_WARP_SIZE``. These were internal symbols
  accidentally exposed via ``legate/cuda/cuda.h`` and have been privatized as part of its
  removal.

.. rubric:: Data

- Make ``legate::ScopedAllocator`` copy-constructible.
- Add ``legate::ScopedAllocator::allocate_aligned()``.
- Add ``legate::ScopedAllocator::allocate_type()``.
- Add ``legate::LogicalArray::as_struct_array()``.
- Add ``legate::StructLogicalArray``.

.. rubric:: Mapping

.. rubric:: Partitioning

- Add ``LogicalStore::get_partition()``. This method allows users to access the
  partition used by the runtime for optimizing task launches and data movement.

.. rubric:: Tasks

.. rubric:: Types

.. rubric:: Runtime

- Add ``legate::Runtime::create_struct_array()``.

.. rubric:: Utilities

- Switch ``legate::Span`` to being an alias to ``cuda::std::span`` instead of the
  homegrown implementation. As ``legate::Span`` mirrored the interface of ``std::span``
  (which ``cuda::std::span`` does as well), this change should be invisible to users.

.. rubric:: I/O

- Change HDF5 Virtual File Driver (VFD) GPUDirectStorage (GDS) to enabled by default if
  Legate was built with support for it and Legate determines that GDS is likely to
  work. Previously this feature was disabled but could be toggled on via the
  ``--io-use-vfd-gds`` LEGATE_CONFIG option.

  Users should note that there is presently no way to reliably know ahead of time
  (i.e. before attempting cuFile calls) whether the filesystem supports GDS. Legate
  employs several heuristics to determine viability that -- while rare -- can provide both
  false positives *and* false negatives. Users relying on I/O performance who want this
  feature enabled should ensure it is on via the flag (as before), while users that
  encounter false positives should disable it via the flag and raise a bug report at
  https://github.com/nv-legate/legate/issues.

Python
------

.. rubric:: General

.. rubric:: Data

- Add ``legate.core.LogicalArray.as_struct_array()``.
- Add ``legate.core.StructLogicalArray``.

.. rubric:: Mapping

- Add ``legate.core.DimOrdering`` and ``legate.core.DimOrderingKind`` for
  dimension ordering
- Add an optional argument of type ``DimOrderingKind`` to
  ``legate.core.Runtime.create_from_buffer()``
  that denotes the dimension ordering kind

.. rubric:: Partitioning

- Add ``legate.core.LogicalStore.partition``. This property allows users to access
  the partition used by the runtime for optimizing task launches and data movement.

.. rubric:: Tasks

.. rubric:: Types

.. rubric:: Runtime

- Add ``legate.core.Runtime.create_struct_array()``.

.. rubric:: Utilities

.. rubric:: I/O

- Add ``legate.io.hdf5.from_file_batched()`` to read a HDF5 file in batches.

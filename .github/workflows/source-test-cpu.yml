# SPDX-FileCopyrightText: Copyright (c) 2025-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0
on:
  workflow_call:
    inputs:
      build-type:
        required: true
        type: string
      node_type:
        type: string
        default: "cpu8"
      linux_ver:
        type: string
        default: "rockylinux:8"
      script:
        type: string
        default: "continuous_integration/scripts/source_test/linux_cpu.bash"
      matrix_filter:
        type: string
        default: "."

defaults:
  run:
    shell: bash -eou pipefail {0}

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  compute-matrix:
    runs-on: linux-amd64-cpu4
    timeout-minutes: 15
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Compute Build Matrix
        id: compute-matrix
        run: |
          set -eo pipefail

          # please keep the matrices sorted in ascending order by the following:
          #
          #     [ARCH, GCC_VER, BUILD_MODE]
          #
          export MATRIX="
          # amd64
          - { ARCH: 'amd64', GCC_VER: '10', BUILD_MODE: 'Release CPU'}
          - { ARCH: 'amd64', GCC_VER: '14', BUILD_MODE: 'Release CPU'}
          - { ARCH: 'amd64', GCC_VER: '10', BUILD_MODE: 'Debug CPU'}
          - { ARCH: 'amd64', GCC_VER: '14', BUILD_MODE: 'Debug CPU'}
          # Only do sanitizer builds on latest compiler
          - { ARCH: 'amd64', GCC_VER: '14', BUILD_MODE: 'Sanitizer CPU'}
          "

          MATRIX="$(
            yq -n -o json 'env(MATRIX)' | \
            jq -c '${{ inputs.matrix_filter }} | if (. | length) > 0 then {include: .} else "Error: Empty matrix\n" | halt_error(1) end'
          )"

          echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"

  test:
    name: ${{ matrix.ARCH }}, gcc${{ matrix.GCC_VER }}, ${{ matrix.BUILD_MODE }}
    needs: compute-matrix
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: "linux-${{ matrix.ARCH }}-${{ inputs.node_type }}"
    container:
      image: rockylinux/${{ inputs.linux_ver }}

    steps:
      - uses: actions/checkout@v5

      - name: Add default paths to the env
        run: |
          tools_dir="$(pwd)/continuous_integration/scripts/tools"

          echo "${tools_dir}" >> "${GITHUB_PATH}"

      - name: Setup proxy cache
        uses: nv-gha-runners/setup-proxy-cache@main
        continue-on-error: true

      - uses: actions/checkout@v5
        with:
          repository: rapidsai/gha-tools
          path: gha-tools

      - name: Add rapids GHA tools to path
        run: |
          echo "${GITHUB_WORKSPACE}/gha-tools/tools" >> "${GITHUB_PATH}"

      - name: Download source build from the build job
        uses: actions/download-artifact@v5
        env:
          BUILD_NAME: ${{ matrix.ARCH }}-gcc${{ matrix.GCC_VER }}-${{ matrix.BUILD_MODE }}
        with:
          name: source-build-${{ env.BUILD_NAME }}
          path: artifacts

      - name: Untar build tree
        run: tar -zxvf artifacts/build.tgz

      - name: Inspect extracted files
        run: ls -lhR build

      - name: Install dependencies
        env:
          BUILD_MODE: ${{ matrix.BUILD_MODE }}
        run: |
          packages=(
            libatomic
            python3.11
            python3.11-pip
          )

          if [[ "${BUILD_MODE}" == *"Sanitizer"* ]]; then
            packages+=(
              libasan8
              libubsan
            )
          fi

          rapids-retry dnf install -y "${packages[@]}"

          # Bootstrap CMake, rapids-pip-retry by default calls 'python -m pip', but
          # python3.11 above installs 'python3', so have to override the default command.
          RAPIDS_PIP_EXE='python3 -m pip' rapids-pip-retry install cmake ninja

      - name: Run C++ unit tests
        run: ${{ inputs.script }}

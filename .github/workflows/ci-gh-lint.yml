# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0
---
name: Lint

concurrency:
  group: >-
    ${{
      (github.ref == 'refs/heads/main' || startsWith(github.ref_name, 'branch-')) &&
      format('{0}-{1}', github.workflow, github.run_id) ||
      format('{0}-{1}', github.workflow, github.ref_name)
    }}
  cancel-in-progress: true

on:
  push:
    branches:
      - "pull-request/[0-9]+"
      - "*branch-*"
      - "main"
  merge_group:

defaults:
  run:
    shell: bash -el {0}

jobs:
  pre-commit:
    runs-on: 'linux-amd64-cpu4'
    timeout-minutes: 15
    strategy:
      fail-fast: false
    if: ${{ github.repository_owner == 'nv-legate' }}
    permissions:
      contents: read  # This is required for actions/checkout

    name: pre-commit

    steps:
      - name: Checkout ${{ github.event.repository.name }} (= this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate requirements.txt
        run: |
          {
            echo "shellcheck-py"
            echo "cmakelang"
            echo "rich"
          } > ${{ runner.temp }}/requirements.txt

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r ${{ runner.temp }}/requirements.txt

      - name: Set LEGATE_DIR
        run: |
          echo "LEGATE_DIR=${{ github.workspace }}" >> "${GITHUB_ENV}"

      - name: run pre-commit
        uses: pre-commit/action@v3.0.1

  tidy:
    env:
      LEGATE_ARCH: arch-ci-lint
      LEGATE_DIR: ${{ github.workspace }}
    runs-on: 'linux-amd64-cpu16'
    timeout-minutes: 60
    strategy:
      fail-fast: true
    if: ${{ github.repository_owner == 'nv-legate' }}
    permissions:
      contents: read  # This is required for actions/checkout

    steps:
      - name: List machine info
        run: |
          uname -a
          lsb_release -a

      - name: Checkout ${{ github.event.repository.name }} (= this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          activate-environment: legate
          use-mamba: true

      - name: Get Week Number
        id: get-week-hash
        run: |
          WEEK="$(/bin/date -u '+%Y%W')"
          echo "week=${WEEK}" >> "${GITHUB_OUTPUT}"

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            ci-gh-lint-tidy-${{ runner.os }}--${{ runner.arch }}--${{
            steps.get-week-hash.outputs.week }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 1
        id: cache

      - name: Update environment
        run: |
          conda create -n legate \
            cmake \
            clang \
            clangxx \
            clang-tools \
            elfutils \
            hdf5 \
            rich \
            ninja \
            packaging \
            pybind11
        if: steps.cache.outputs.cache-hit != 'true'

      - name: List Conda packages and info
        run: |
          conda info
          conda list

      - name: List clang-tidy version
        run: |
          clang-tidy --version

      - name: Configure legate
        # CMake Error: CMake was unable to find a build program corresponding to "Ninja".
        # CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build
        # tool.
        run: |
          ./configure \
            --with-tests \
            --with-benchmarks \
            --with-cc=clang \
            --with-cxx=clang++ || { cat configure.log; exit 1; }

      - name: Run clang-tidy
        run: |
          # "-- -k" tells the underlying build tool to not stop on first error. We want
          # CI to unearth all clang-tidy errors in one go, otherwise the dev needs to play
          # whack-a-mole with each additional error.
          LEGATE_CMAKE_ARGS="-- -k 0" make tidy -j 14


  lint-pass:
    if: always()
    needs:
      - pre-commit
      - tidy
    runs-on: linux-amd64-cpu4
    timeout-minutes: 15
    steps:
      - name: Check job results
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1

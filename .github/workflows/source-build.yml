# SPDX-FileCopyrightText: Copyright (c) 2025-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0
on:
  workflow_call:
    inputs:
      build-type:
        required: true
        type: string
      node_type:
        type: string
        default: "cpu16"
      cuda_ver:
        type: string
        default: "12.9.0"
      linux_ver:
        type: string
        default: "rockylinux8"
      script:
        type: string
        default: "continuous_integration/scripts/build_source_linux.bash"
      matrix_filter:
        type: string
        default: "."

defaults:
  run:
    shell: bash -eou pipefail {0}

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: none
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  compute-matrix:
    runs-on: linux-amd64-cpu4
    timeout-minutes: 15
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Compute Build Matrix
        id: compute-matrix
        run: |
          set -eo pipefail

          # please keep the matrices sorted in ascending order by the following:
          #
          #     [ARCH, GCC_VER, BUILD_MODE]
          #
          export MATRIX="
          # amd64
          - { ARCH: 'amd64', GCC_VER: '10', BUILD_MODE: 'release' }
          - { ARCH: 'amd64', GCC_VER: '14', BUILD_MODE: 'release' }
          "

          MATRIX="$(
            yq -n -o json 'env(MATRIX)' | \
            jq -c '${{ inputs.matrix_filter }} | if (. | length) > 0 then {include: .} else "Error: Empty matrix\n" | halt_error(1) end'
          )"

          echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"
  build:
    name: ${{ matrix.ARCH }}, gcc${{ matrix.GCC_VER }}, ${{ matrix.BUILD_MODE }}
    needs: compute-matrix
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: "linux-${{ matrix.ARCH }}-${{ inputs.node_type }}"
    container:
      image: nvidia/cuda:${{ inputs.cuda_ver }}-devel-${{ inputs.linux_ver }}

    steps:
      - if: github.repository_owner == 'nv-legate'
        name: Get AWS credentials for sccache bucket
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          role-duration-seconds: 28800 # 8 hours
          role-to-assume: arn:aws:iam::279114543810:role/gha-oidc-nv-legate

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add default paths to the env
        run: |
          # The || true is to satisfy the linting check, seems less readable to me.
          echo "$(pwd)/continuous_integration/scripts/tools" >> "${GITHUB_PATH}" || true

      - uses: actions/checkout@v4
        with:
          repository: rapidsai/gha-tools
          path: gha-tools
          fetch-depth: 0

      - name: Add rapids GHA tools to path
        run: |
          echo "${GITHUB_WORKSPACE}/gha-tools/tools" >> "${GITHUB_PATH}"

      - name: C++ source build
        run: ${{ inputs.script }}
        env:
          GCC_VER: ${{ matrix.GCC_VER }}
          GH_TOKEN: ${{ github.token }}

      - name: Compress build tree
        run: |
          tar -cpvzf \
            build.tgz \
            --exclude='*.o' \
            --exclude='*.cc' \
            --exclude='*.h' \
            --exclude='.git' \
            --exclude='CMakeFiles' \
            --exclude='_deps/*-src' \
            --exclude='_deps/*-subbuild' \
            build

      - name: C++ build upload
        env:
          BUILD_NAME: ${{ matrix.ARCH }}-cuda12-gcc${{ matrix.GCC_VER }}
        uses: actions/upload-artifact@v4
        with:
          name: source-build-${{ env.BUILD_NAME }}
          path: build.tgz

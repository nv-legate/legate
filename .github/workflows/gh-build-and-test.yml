# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: Apache-2.0
---
on:
  workflow_call:
    inputs:
      build-mode:
        required: true
        type: string
      build-type:
        required: true
        type: string
      network:
        required: true
        type: string
      platform:
        required: true
        type: string
      ref-sha:
        required: false
        type: string
        default: ''
      python-version:
        required: false
        type: string
      target-device:
        required: true
        type: string
      build-has-tests:
        required: true
        type: boolean
      upload-action:
        required: false
        default: 'upload-package-None'
        type: string
      refname:
        required: true
        type: string
      default-branch:
        required: true
        type: string

defaults:
  run:
    shell: bash --noprofile --norc -xeuo pipefail {0}

jobs:
  build:
    if: ${{ github.repository_owner == 'nv-legate' }}
    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-build.yml@v1.38
    with:
      build-has-tests: ${{ inputs.build-has-tests }}
      client-repo: ${{ github.event.repository.name }}
      client-ref: ${{ inputs.ref-sha }}
      target-device: ${{ inputs.target-device }}
      runs-on: ${{ (inputs.platform == 'linux' && 'linux-amd64-cpu16') || (inputs.platform == 'linux-aarch64' && 'linux-arm64-cpu16') || (inputs.platform == 'mac' && 'macos-latest') }}
      build-type: ${{ inputs.build-type }}
      use-container: ${{ inputs.platform == 'linux' || inputs.platform == 'linux-aarch64'}}
      platform: ${{ inputs.platform }}
      dependencies-file: ""
      legate-gh-ci-tag: "v1.38"
      build-mode: ${{ inputs.build-mode }}
      python-version: ${{ inputs.python-version }}
      network: ${{ inputs.network }}
      setup-python-proxy-cache: true
      timeout: 180
    secrets: inherit

  setup-test:
    name: Setup test
    # Don't run GPU tests on linux-aarch64. We don't have enough test machines for this.
    if: inputs.build-has-tests == true && (inputs.build-type == 'nightly' || inputs.target-device != 'gpu' || inputs.platform != 'linux-aarch64')
    needs:
      - build
    runs-on: linux-amd64-cpu4
    timeout-minutes: 20
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        shell: bash --noprofile --norc -xeuo pipefail {0}
        run: |
          MATRIX_JSON='{"include": ['
          RUNNERS=(
            'linux-amd64-gpu-l4-latest-1:gpu:gpu:linux'
            'linux-amd64-gpu-a100-latest-2-llr:gpu:2gpu:linux'
            'linux-amd64-cpu8:cpu:cpu:linux'
            'linux-aarch64-2gpu:gpu:gpu:linux-aarch64'
            'linux-aarch64-2gpu:gpu:2gpu:linux-aarch64'
            'linux-arm64-cpu16:cpu:cpu:linux-aarch64'
            'macos-latest:cpu:cpu:mac'
          )
          TEST_CONFIGS=(
            'Python Unit Tests:python'
            'C++ Unit Tests:cpp'
          )

          for RUNNER in "${RUNNERS[@]}"; do
            IFS=':' read -ra RUNNER_INFO <<< "${RUNNER}"
            RUNNER_NAME=${RUNNER_INFO[0]}
            RUNNER_TYPE=${RUNNER_INFO[1]}
            RUNNER_DEVICE=${RUNNER_INFO[2]}
            RUNNER_PLATFORM=${RUNNER_INFO[3]}

            if [[ "${RUNNER_TYPE}" == "${{ inputs.target-device }}" && "${RUNNER_PLATFORM}" == "${{ inputs.platform }}" ]]; then
              for TEST_CONFIG in "${TEST_CONFIGS[@]}"; do
                IFS=':' read -ra CONFIG_INFO <<< "${TEST_CONFIG}"
                CONFIG_NAME=${CONFIG_INFO[0]}
                CONFIG_SCOPE=${CONFIG_INFO[1]}

                # Don't setup python proxy cache for the aarch64-linux 2GPU
                # machines since they can't reach it over the network.
                if [[ "${RUNNER_DEVICE}" == "2gpu" ]] && [[ "${RUNNER_PLATFORM}" == "linux-aarch64" ]]; then
                  SETUP_PYTHON_PROXY_CACHE=false
                else
                  SETUP_PYTHON_PROXY_CACHE=true
                fi

                MATRIX_JSON+="{\"runner\": {\"name\": \"${RUNNER_NAME}\", \"type\": \"${RUNNER_TYPE}\", \"device\": \"${RUNNER_DEVICE}\", \"platform\": \"${RUNNER_PLATFORM}\", \"setup-python-proxy-cache\": ${SETUP_PYTHON_PROXY_CACHE}}, \"test-config\": {\"name\": \"${CONFIG_NAME}\", \"test-scope\": \"${CONFIG_SCOPE} ${RUNNER_DEVICE}\"}},"
              done
            fi
          done

          MATRIX_JSON=${MATRIX_JSON%,} # Remove the trailing comma
          MATRIX_JSON+=']}'
          echo "matrix=${MATRIX_JSON}" >> "${GITHUB_OUTPUT}"

  test-within-container:
    if: github.repository_owner == 'nv-legate' && inputs.build-has-tests == true && (inputs.platform == 'linux' || inputs.platform == 'linux-aarch64')
    needs:
      - setup-test

    name: ${{ matrix.test-config.name }} (${{ inputs.platform }}, ${{ inputs.target-device }}, ${{ inputs.build-mode }}, ${{ inputs.network }})

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup-test.outputs.matrix)}}

    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-test-within-container.yml@v1.38
    with:
      build-has-tests: ${{ inputs.build-has-tests }}
      client-repo: ${{ github.event.repository.name }}
      client-ref: ${{ inputs.ref-sha }}
      build-type: ${{ inputs.build-type }}
      name: "${{ matrix.test-config.name }} (${{ matrix.runner.device }})"
      target-device: ${{ inputs.target-device }}
      runs-on: ${{ matrix.runner.name }}
      has-gpu: ${{ matrix.runner.type == 'gpu' }}
      test-options: ${{ matrix.test-config.test-scope }}
      platform: ${{ matrix.runner.platform }}
      legate-gh-ci-tag: "v1.38"
      build-mode: ${{ inputs.build-mode }}
      python-version: ${{ inputs.python-version }}
      network: ${{ inputs.network }}
      setup-python-proxy-cache: ${{ matrix.runner.setup-python-proxy-cache }}
      enable-core-dumps: false
      timeout: 90
    secrets: inherit


  test-without-container:
    if: github.repository_owner == 'nv-legate' && (inputs.platform != 'linux' && inputs.platform != 'linux-aarch64')
    needs:
      - setup-test

    name: ${{ matrix.test-config.name }} (${{ inputs.platform }}, ${{ inputs.target-device }}, ${{ inputs.build-mode }}, ucx enabled)

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup-test.outputs.matrix)}}

    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-test-without-container.yml@v1.38
    with:
      build-has-tests: ${{ inputs.build-has-tests }}
      client-repo: ${{ github.event.repository.name }}
      client-ref: ${{ inputs.ref-sha }}
      build-type: ${{ inputs.build-type }}
      name: ${{ matrix.test-config.name }}
      target-device: ${{ inputs.target-device }}
      runs-on: ${{ matrix.runner.name }}
      has-gpu: ${{ matrix.runner.type == 'gpu' }}
      test-options: ${{ matrix.test-config.test-scope }}
      platform: ${{ matrix.runner.platform }}
      legate-gh-ci-tag: "v1.38"
      build-mode: ${{ inputs.build-mode }}
      python-version: ${{ inputs.python-version }}
      network: ${{ inputs.network }}
      setup-python-proxy-cache: ${{ matrix.runner.setup-python-proxy-cache }}
      enable-core-dumps: false
      timeout: 90
    secrets: inherit

  upload:
    needs: test-within-container
    # The use of always() below, ensures the step will run even on failure of the tests
    # before if other conditionals are all true.
    # We use the package with tests to test and then upload corresponding package without test.
    if: ${{ always() && github.repository_owner == 'nv-legate' && inputs.build-type == 'nightly' && inputs.build-mode == 'release' && inputs.build-has-tests == true }}
    name: Upload package to Server
    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-upload.yml@v1.38
    with:
      build-has-tests: false
      client-repo: ${{ github.event.repository.name }}
      client-ref: ${{ inputs.ref-sha }}
      build-type: ${{ inputs.build-type }}
      name: Upload to Anaconda
      target-device: ${{ inputs.target-device }}
      platform: ${{ inputs.platform }}
      legate-gh-ci-tag: "v1.38"
      build-mode: ${{ inputs.build-mode }}
      network: ${{ inputs.network }}
      upload-action: ${{ needs.test-within-container.result == 'failure' && 'upload-package-Anaconda' || 'upload-package-Anaconda-tested' }}
      pkgSubString: "legate"
      repos-Root: "legate"
      python-version: ${{ inputs.python-version }}
      refname: ${{ inputs.refname }}
      default-branch: ${{ inputs.default-branch }}
      timeout: 15
    secrets: inherit
